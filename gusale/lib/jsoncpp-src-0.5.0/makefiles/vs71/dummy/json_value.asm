; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	f:\cygwin\home\Charles\GuSale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat


PUBLIC	??_R4DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R3DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DefaultValueAllocator@Json@@8	; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDefaultValueAllocator@Json@@@8		; Json::DefaultValueAllocator `RTTI Type Descriptor'
PUBLIC	??_R4ValueAllocator@Json@@6B@			; Json::ValueAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R3ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ValueAllocator@Json@@8		; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVValueAllocator@Json@@@8			; Json::ValueAllocator `RTTI Type Descriptor'
PUBLIC	??_R4StyledWriter@Json@@6B@			; Json::StyledWriter::`RTTI Complete Object Locator'
PUBLIC	??_R3StyledWriter@Json@@8			; Json::StyledWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StyledWriter@Json@@8			; Json::StyledWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Writer@Json@@8			; Json::Writer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3Writer@Json@@8				; Json::Writer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Writer@Json@@8				; Json::Writer::`RTTI Base Class Array'
PUBLIC	??_R0?AVWriter@Json@@@8				; Json::Writer `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@StyledWriter@Json@@8		; Json::StyledWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVStyledWriter@Json@@@8			; Json::StyledWriter `RTTI Type Descriptor'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??0StaticString@Json@@QAE@PBD@Z			; Json::StaticString::StaticString
PUBLIC	??$swap@PBD@std@@YAXAAPBD0@Z			; std::swap<char const *>
PUBLIC	??$swap@H@std@@YAXAAH0@Z			; std::swap<int>
PUBLIC	??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@XZ ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >
PUBLIC	??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	?c_str@StaticString@Json@@QBEPBDXZ		; Json::StaticString::c_str
PUBLIC	??0?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@QAE@U?$less@VCZString@Value@Json@@@1@@Z ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>
PUBLIC	??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node><std::pair<Json::Value::CZString const ,Json::Value> >
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *><std::pair<Json::Value::CZString const ,Json::Value> >
PUBLIC	??0?$_Tree_ptr@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_ptr<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >
PUBLIC	?get_allocator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::get_allocator
PUBLIC	?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AU?$less@VCZString@Value@Json@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy
PUBLIC	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>
PUBLIC	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>::construct
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Init
PUBLIC	??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@ABV01@@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>
PUBLIC	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>::destroy
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy
PUBLIC	??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor'
PUBLIC	??$swap@TValueHolder@Value@Json@@@std@@YAXAATValueHolder@Value@Json@@0@Z ; std::swap<Json::Value::ValueHolder>
PUBLIC	??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator<<Json::Value::CZString const ,Json::Value>
PUBLIC	??$_Lexicographical_compare@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@@std@@YA_NVconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@000@Z ; std::_Lexicographical_compare<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator>
PUBLIC	??$lexicographical_compare@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@@std@@YA_NVconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@000@Z ; std::lexicographical_compare<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator>
PUBLIC	??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::operator<<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AVconst_iterator@12@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
PUBLIC	??$_Checked_base@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YA?AVconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@AAV120@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator>
PUBLIC	??$_Checked_base@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YA?AVconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@AAV120@@Z ; std::_Checked_base<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator>
PUBLIC	??$_Iter_random@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@@std@@YA?AUforward_iterator_tag@0@ABVconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::_Iter_random<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator>
PUBLIC	??$_Checked_cat@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YA?AU_Range_checked_iterator_tag@0@ABVconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z ; std::_Checked_cat<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator>
PUBLIC	??0?$pair@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@@std@@QAE@ABVconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@0@Z ; std::pair<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator>::pair<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator>
PUBLIC	??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator==<Json::Value::CZString const ,Json::Value>
PUBLIC	??$_Mismatch@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@Uforward_iterator_tag@3@@std@@YA?AU?$pair@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@@0@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@00Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Mismatch<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::forward_iterator_tag>
PUBLIC	??$_Equal@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@Uforward_iterator_tag@3@@std@@YA_NVconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@00Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Equal<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::forward_iterator_tag>
PUBLIC	??$equal@Vconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@@std@@YA_NVconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@00@Z ; std::equal<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator>
PUBLIC	??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::operator==<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::operator++
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
PUBLIC	?_Ubound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Ubound
PUBLIC	?upper_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::upper_bound
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@0@Z ; std::pair<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator>::pair<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator,std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator>
PUBLIC	?equal_range@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@V123@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::equal_range
PUBLIC	??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z ; std::_Iter_cat<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator>
PUBLIC	??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z ; std::_Distance2<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator,unsigned int>
PUBLIC	??$_Distance@Viterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0AAI@Z ; std::_Distance<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator,unsigned int>
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEIABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator,bool>
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::insert
PUBLIC	?max_size@?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QBEIXZ ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::max_size
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocate
PUBLIC	??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node::_Node
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@D@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::const_iterator
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::iterator
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Dec
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator--
PUBLIC	??Fiterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::operator--
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::insert
PUBLIC	??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABVCZString@Value@Json@@ABV34@@Z ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>
PUBLIC	??BStaticString@Json@@QBEPBDXZ			; Json::StaticString::operator char const *
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::deallocate
PUBLIC	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
PUBLIC	??1_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node::~_Node
PUBLIC	??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node::`scalar deleting destructor'
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::destroy
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Color
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Max
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rmost
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::operator++
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
PUBLIC	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
PUBLIC	?_Kfn@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAABVCZString@Value@Json@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Root
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Mynode
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::operator*
PUBLIC	??Citerator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEPAU?$pair@$$CBVCZString@Value@Json@@V23@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::operator->
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myval
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator*
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Parent
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Right
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Isnil
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Min
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Inc
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator++
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator==
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator!=
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
PUBLIC	?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
PUBLIC	?_Buy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buy
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Checked_iterator_base
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Different_checked_iterator_base_type_tag>
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0PAV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@0PAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Checked_iterator_base@?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Checked_iterator_base
PUBLIC	??$_Checked_base@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Different_checked_iterator_base_type_tag>
PUBLIC	??$_Checked_base@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ; std::_Checked_base<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$_Unchecked_uninitialized_move@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0PAV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Umove@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@0PAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
PUBLIC	?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
PUBLIC	??0?$_Ranit@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Ranit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??0?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base@1@@Z ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base@1@@Z ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
PUBLIC	??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
PUBLIC	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
PUBLIC	?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
PUBLIC	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
PUBLIC	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Unchecked_uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; stdext::_Unchecked_uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Fill@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0ABV10@@Z ; std::_Fill<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$fill@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0ABV10@@Z ; std::fill<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Iter_random@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Iter_random<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Move_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Checked_base@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Checked_base@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@@Z ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
PUBLIC	?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap
PUBLIC	??$swap@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::swap<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::forward_iterator_tag>
PUBLIC	??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Unchecked_move_backward@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@00@Z ; stdext::_Unchecked_move_backward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert_n
PUBLIC	??Y?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator+=
PUBLIC	??Y?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator+=
PUBLIC	??H?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator+
PUBLIC	??G?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-
PUBLIC	??G?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-
PUBLIC	?insert@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@V32@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert
PUBLIC	??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
PUBLIC	??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$unchecked_uninitialized_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; stdext::unchecked_uninitialized_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Ufill@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@IABV32@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ufill
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	??$_Ptr_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
PUBLIC	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??_GStyledWriter@Json@@UAEPAXI@Z		; Json::StyledWriter::`scalar deleting destructor'
PUBLIC	??1StyledWriter@Json@@UAE@XZ			; Json::StyledWriter::~StyledWriter
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Left
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lmost
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
PUBLIC	??0?$_Bidit@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<std::pair<Json::Value::CZString const ,Json::Value>,int,std::pair<Json::Value::CZString const ,Json::Value> const *,std::pair<Json::Value::CZString const ,Json::Value> const &>::_Bidit<std::pair<Json::Value::CZString const ,Json::Value>,int,std::pair<Json::Value::CZString const ,Json::Value> const *,std::pair<Json::Value::CZString const ,Json::Value> const &>
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::const_iterator
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::iterator
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
PUBLIC	??0?$allocator@PBVPathArgument@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>
PUBLIC	??0?$_Vector_val@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAE@V?$allocator@PBVPathArgument@Json@@@1@@Z ; std::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Vector_val<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	??0?$allocator@PBVPathArgument@Json@@@std@@QAE@XZ ; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>
PUBLIC	?_Buy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAE_NI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Buy
PUBLIC	??0?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Tidy
PUBLIC	??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	?end@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE?AV?$_Vector_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::end
PUBLIC	??0?$_Vector_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@PAPBVPathArgument@Json@@PBU_Container_base@1@@Z ; std::_Vector_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Vector_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	?begin@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE?AV?$_Vector_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::begin
PUBLIC	?deallocate@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument const *>::deallocate
PUBLIC	??$_Allocate@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@IPAPBV12@@Z ; std::_Allocate<Json::PathArgument const *>
PUBLIC	?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument const *>::allocate
PUBLIC	?capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::capacity
PUBLIC	?size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::size
PUBLIC	?max_size@?$allocator@PBVPathArgument@Json@@@std@@QBEIXZ ; std::allocator<Json::PathArgument const *>::max_size
PUBLIC	?max_size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::max_size
PUBLIC	??$_Destroy_range@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	??$_Destroy_range@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@0AAV?$allocator@PBVPathArgument@Json@@@0@@Z ; std::_Destroy_range<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	?_Destroy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXPAPBVPathArgument@Json@@0@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Destroy
PUBLIC	?_Xlen@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@KAXXZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Xlen
PUBLIC	??$_Uninit_copy@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >
PUBLIC	??$unchecked_uninitialized_copy@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@stdext@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >
PUBLIC	??$_Uninit_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@U_Undefined_move_tag@4@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *>,std::_Undefined_move_tag>
PUBLIC	??$_Unchecked_uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@stdext@@YAPAPBVPathArgument@Json@@PAPBV12@00AAV?$allocator@PBVPathArgument@Json@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >
PUBLIC	??$_Umove@PAPBVPathArgument@Json@@@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEPAPBVPathArgument@Json@@PAPBV23@00@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Umove<Json::PathArgument const * *>
PUBLIC	??$_Fill@PAPBVPathArgument@Json@@PBV12@@std@@YAXPAPBVPathArgument@Json@@0ABQBV12@@Z ; std::_Fill<Json::PathArgument const * *,Json::PathArgument const *>
PUBLIC	??$fill@PAPBVPathArgument@Json@@PBV12@@std@@YAXPAPBVPathArgument@Json@@0ABQBV12@@Z ; std::fill<Json::PathArgument const * *,Json::PathArgument const *>
PUBLIC	??$_Iter_random@PAPBVPathArgument@Json@@PAPBV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPBVPathArgument@Json@@0@Z ; std::_Iter_random<Json::PathArgument const * *,Json::PathArgument const * *>
PUBLIC	??$_Move_cat@PAPBVPathArgument@Json@@@std@@YA?AU_Undefined_move_tag@0@ABQAPBVPathArgument@Json@@@Z ; std::_Move_cat<Json::PathArgument const * *>
PUBLIC	??$_Copy_backward_opt@PAPBVPathArgument@Json@@PAPBV12@Urandom_access_iterator_tag@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Json::PathArgument const * *,Json::PathArgument const * *,std::random_access_iterator_tag>
PUBLIC	??$_Move_backward_opt@PAPBVPathArgument@Json@@PAPBV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Json::PathArgument const * *,Json::PathArgument const * *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Unchecked_move_backward@PAPBVPathArgument@Json@@PAPBV12@@stdext@@YAPAPBVPathArgument@Json@@PAPBV12@00@Z ; stdext::_Unchecked_move_backward<Json::PathArgument const * *,Json::PathArgument const * *>
PUBLIC	?_Insert_n@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXV?$_Vector_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@2@IABQBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Insert_n
PUBLIC	??Y?$_Vector_const_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::operator+=
PUBLIC	??Y?$_Vector_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::operator+=
PUBLIC	??H?$_Vector_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::operator+
PUBLIC	??G?$_Vector_const_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::operator-
PUBLIC	??G?$_Vector_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEHABV?$_Vector_const_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@1@@Z ; std::_Vector_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::operator-
PUBLIC	?insert@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE?AV?$_Vector_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@2@V32@ABQBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::insert
PUBLIC	??$_Ptr_cat@PAPBVPathArgument@Json@@PAPBV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPBVPathArgument@Json@@0@Z ; std::_Ptr_cat<Json::PathArgument const * *,Json::PathArgument const * *>
PUBLIC	??$_Iter_cat@PAPBVPathArgument@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPBVPathArgument@Json@@@Z ; std::_Iter_cat<Json::PathArgument const * *>
PUBLIC	??$_Checked_base@PAPBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@AAPAPBV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::PathArgument const * *>
PUBLIC	??$_Checked_base@PAPBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@AAPAPBV12@@Z ; std::_Checked_base<Json::PathArgument const * *>
PUBLIC	??$_Fill_n@PAPBVPathArgument@Json@@IPBV12@@std@@YAXPAPBVPathArgument@Json@@IABQBV12@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::PathArgument const * *,unsigned int,Json::PathArgument const *>
PUBLIC	??$_Fill_n@PAPBVPathArgument@Json@@IPBV12@@std@@YAXPAPBVPathArgument@Json@@IABQBV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::PathArgument const * *,unsigned int,Json::PathArgument const *>
PUBLIC	??$unchecked_fill_n@PAPBVPathArgument@Json@@IPBV12@@stdext@@YAXPAPBVPathArgument@Json@@IABQBV12@@Z ; stdext::unchecked_fill_n<Json::PathArgument const * *,unsigned int,Json::PathArgument const *>
PUBLIC	??$_Uninit_fill_n@PAPBVPathArgument@Json@@IPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAXPAPBVPathArgument@Json@@IABQBV12@AAV?$allocator@PBVPathArgument@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::PathArgument const * *,unsigned int,Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	??$unchecked_uninitialized_fill_n@PAPBVPathArgument@Json@@IPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@stdext@@YAXPAPBVPathArgument@Json@@IABQBV12@AAV?$allocator@PBVPathArgument@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::PathArgument const * *,unsigned int,Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	?_Ufill@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEPAPBVPathArgument@Json@@PAPBV34@IABQBV34@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Ufill
PUBLIC	?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXABQBVPathArgument@Json@@@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back
PUBLIC	??0?$allocator@VPathArgument@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>
PUBLIC	??0?$_Vector_val@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAE@V?$allocator@VPathArgument@Json@@@1@@Z ; std::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >::_Vector_val<Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	??0?$allocator@VPathArgument@Json@@@std@@QAE@XZ	; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>
PUBLIC	?_Buy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAE_NI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Buy
PUBLIC	??0?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::vector<Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	?_Tidy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Tidy
PUBLIC	??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::~vector<Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	?begin@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::begin
PUBLIC	??0?$_Ranit@PBVPathArgument@Json@@HPBQBV12@ABQBV12@@std@@QAE@XZ ; std::_Ranit<Json::PathArgument const *,int,Json::PathArgument const * const *,Json::PathArgument const * const &>::_Ranit<Json::PathArgument const *,int,Json::PathArgument const * const *,Json::PathArgument const * const &>
PUBLIC	??0?$_Vector_const_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@PAPBVPathArgument@Json@@PBU_Container_base@1@@Z ; std::_Vector_const_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Vector_const_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	?end@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::end
PUBLIC	?end@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE?AV?$_Vector_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@2@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::end
PUBLIC	??0?$_Vector_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@PAVPathArgument@Json@@PBU_Container_base@1@@Z ; std::_Vector_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::_Vector_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	?begin@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE?AV?$_Vector_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@2@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::begin
PUBLIC	?deallocate@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument>::deallocate
PUBLIC	??$_Allocate@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@IPAV12@@Z ; std::_Allocate<Json::PathArgument>
PUBLIC	?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument>::allocate
PUBLIC	?capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::capacity
PUBLIC	?size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::size
PUBLIC	?max_size@?$allocator@VPathArgument@Json@@@std@@QBEIXZ ; std::allocator<Json::PathArgument>::max_size
PUBLIC	?max_size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::max_size
PUBLIC	??$_Destroy_range@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	??$_Destroy_range@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@0AAV?$allocator@VPathArgument@Json@@@0@@Z ; std::_Destroy_range<Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	?_Destroy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXPAVPathArgument@Json@@0@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Destroy
PUBLIC	?_Xlen@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@KAXXZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Xlen
PUBLIC	??$_Uninit_copy@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
PUBLIC	??$unchecked_uninitialized_copy@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@stdext@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
PUBLIC	??$_Uninit_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@U_Undefined_move_tag@4@@std@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument>,std::_Undefined_move_tag>
PUBLIC	??$_Unchecked_uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@stdext@@YAPAVPathArgument@Json@@PAV12@00AAV?$allocator@VPathArgument@Json@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
PUBLIC	??$_Umove@PAVPathArgument@Json@@@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEPAVPathArgument@Json@@PAV23@00@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Umove<Json::PathArgument *>
PUBLIC	??$_Fill@PAVPathArgument@Json@@V12@@std@@YAXPAVPathArgument@Json@@0ABV12@@Z ; std::_Fill<Json::PathArgument *,Json::PathArgument>
PUBLIC	??$fill@PAVPathArgument@Json@@V12@@std@@YAXPAVPathArgument@Json@@0ABV12@@Z ; std::fill<Json::PathArgument *,Json::PathArgument>
PUBLIC	??$_Iter_random@PAVPathArgument@Json@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVPathArgument@Json@@0@Z ; std::_Iter_random<Json::PathArgument *,Json::PathArgument *>
PUBLIC	??$_Move_cat@PAVPathArgument@Json@@@std@@YA?AU_Undefined_move_tag@0@ABQAVPathArgument@Json@@@Z ; std::_Move_cat<Json::PathArgument *>
PUBLIC	??$_Checked_base@PAVPathArgument@Json@@@std@@YAPAVPathArgument@Json@@AAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::PathArgument *>
PUBLIC	??$_Checked_base@PAVPathArgument@Json@@@std@@YAPAVPathArgument@Json@@AAPAV12@@Z ; std::_Checked_base<Json::PathArgument *>
PUBLIC	??4PathArgument@Json@@QAEAAV01@ABV01@@Z		; Json::PathArgument::operator=
PUBLIC	??$_Copy_backward_opt@PAVPathArgument@Json@@PAV12@Uforward_iterator_tag@std@@@std@@YAPAVPathArgument@Json@@PAV12@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Json::PathArgument *,Json::PathArgument *,std::forward_iterator_tag>
PUBLIC	??$_Copy_backward_opt@PAVPathArgument@Json@@PAV12@@std@@YAPAVPathArgument@Json@@PAV12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<Json::PathArgument *,Json::PathArgument *>
PUBLIC	??$_Move_backward_opt@PAVPathArgument@Json@@PAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAVPathArgument@Json@@PAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<Json::PathArgument *,Json::PathArgument *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Unchecked_move_backward@PAVPathArgument@Json@@PAV12@@stdext@@YAPAVPathArgument@Json@@PAV12@00@Z ; stdext::_Unchecked_move_backward<Json::PathArgument *,Json::PathArgument *>
PUBLIC	?_Insert_n@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXV?$_Vector_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@2@IABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Insert_n
PUBLIC	??Y?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::operator+=
PUBLIC	??Y?$_Vector_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::operator+=
PUBLIC	??H?$_Vector_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::operator+
PUBLIC	??G?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::operator-
PUBLIC	??G?$_Vector_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEHABV?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@1@@Z ; std::_Vector_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::operator-
PUBLIC	?insert@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE?AV?$_Vector_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@2@V32@ABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::insert
PUBLIC	??$_Ptr_cat@PAVPathArgument@Json@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVPathArgument@Json@@0@Z ; std::_Ptr_cat<Json::PathArgument *,Json::PathArgument *>
PUBLIC	??0PathArgument@Json@@QAE@ABV01@@Z		; Json::PathArgument::PathArgument
PUBLIC	??$_Construct@VPathArgument@Json@@V12@@std@@YAXPAVPathArgument@Json@@ABV12@@Z ; std::_Construct<Json::PathArgument,Json::PathArgument>
PUBLIC	?construct@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV34@@Z ; std::allocator<Json::PathArgument>::construct
PUBLIC	??1PathArgument@Json@@QAE@XZ			; Json::PathArgument::~PathArgument
PUBLIC	??_GPathArgument@Json@@QAEPAXI@Z		; Json::PathArgument::`scalar deleting destructor'
PUBLIC	??$_Destroy@VPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@@Z ; std::_Destroy<Json::PathArgument>
PUBLIC	?destroy@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@@Z ; std::allocator<Json::PathArgument>::destroy
PUBLIC	??$_Uninit_fill_n@PAVPathArgument@Json@@IV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAXPAVPathArgument@Json@@IABV12@AAV?$allocator@VPathArgument@Json@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::PathArgument *,unsigned int,Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	??$unchecked_uninitialized_fill_n@PAVPathArgument@Json@@IV12@V?$allocator@VPathArgument@Json@@@std@@@stdext@@YAXPAVPathArgument@Json@@IABV12@AAV?$allocator@VPathArgument@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::PathArgument *,unsigned int,Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	?_Ufill@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEPAVPathArgument@Json@@PAV34@IABV34@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Ufill
PUBLIC	?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
PUBLIC	??D?$_Vector_const_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEABQBVPathArgument@Json@@XZ ; std::_Vector_const_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::operator*
PUBLIC	??8?$_Vector_const_iterator@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::operator==
PUBLIC	?begin@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@2@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::begin
PUBLIC	??0?$_Ranit@VPathArgument@Json@@HPBV12@ABV12@@std@@QAE@XZ ; std::_Ranit<Json::PathArgument,int,Json::PathArgument const *,Json::PathArgument const &>::_Ranit<Json::PathArgument,int,Json::PathArgument const *,Json::PathArgument const &>
PUBLIC	??0?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@PAVPathArgument@Json@@PBU_Container_base@1@@Z ; std::_Vector_const_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::_Vector_const_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	?end@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@2@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::end
PUBLIC	??D?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEABVPathArgument@Json@@XZ ; std::_Vector_const_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::operator*
PUBLIC	??E?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::operator++
PUBLIC	??8?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::operator==
PUBLIC	??9?$_Vector_const_iterator@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<Json::PathArgument,std::allocator<Json::PathArgument> >::operator!=
PUBLIC	??_GValueAllocator@Json@@UAEPAXI@Z		; Json::ValueAllocator::`scalar deleting destructor'
PUBLIC	??0ValueAllocator@Json@@QAE@XZ			; Json::ValueAllocator::ValueAllocator
PUBLIC	??0DefaultValueAllocator@Json@@QAE@XZ		; Json::DefaultValueAllocator::DefaultValueAllocator
PUBLIC	?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z ; Json::DefaultValueAllocator::makeMemberName
PUBLIC	?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z ; Json::DefaultValueAllocator::releaseMemberName
PUBLIC	?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z ; Json::DefaultValueAllocator::duplicateStringValue
PUBLIC	?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z ; Json::DefaultValueAllocator::releaseStringValue
PUBLIC	??_GDefaultValueAllocator@Json@@UAEPAXI@Z	; Json::DefaultValueAllocator::`scalar deleting destructor'
PUBLIC	??1DefaultValueAllocator@Json@@UAE@XZ		; Json::DefaultValueAllocator::~DefaultValueAllocator
PUBLIC	??0DummyValueAllocatorInitializer@Json@@QAE@XZ	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1?$AA@ ; `string'
PUBLIC	??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5strin@ ; `string'
PUBLIC	??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5ra@ ; `string'
PUBLIC	??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5range@ ; `string'
PUBLIC	??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int?$AA@ ; `string'
PUBLIC	??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5conv@ ; `string'
PUBLIC	??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ran@ ; `string'
PUBLIC	??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint?$AA@ ; `string'
PUBLIC	??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doubl@ ; `string'
PUBLIC	??_C@_02GLFAOOJA@?$FL?4?$AA@			; `string'
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7StyledWriter@Json@@6B@			; Json::StyledWriter::`vftable'
PUBLIC	??_7ValueAllocator@Json@@6B@			; Json::ValueAllocator::`vftable'
PUBLIC	??_7DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`vftable'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_EStyledWriter@Json@@UAEPAXI@Z:PROC		; Json::StyledWriter::`vector deleting destructor'
EXTRN	_strchr:PROC
EXTRN	_atexit:PROC
EXTRN	__purecall:PROC
EXTRN	??_EValueAllocator@Json@@UAEPAXI@Z:PROC		; Json::ValueAllocator::`vector deleting destructor'
EXTRN	_malloc:PROC
EXTRN	??_EDefaultValueAllocator@Json@@UAEPAXI@Z:PROC	; Json::DefaultValueAllocator::`vector deleting destructor'
;	COMDAT ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
_BSS	SEGMENT
?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A DD 01H DUP (?) ; `Json::valueAllocator'::`2'::defaultAllocator
;	COMDAT ??_7DefaultValueAllocator@Json@@6B@
CONST	SEGMENT
??_7DefaultValueAllocator@Json@@6B@ DD FLAT:??_R4DefaultValueAllocator@Json@@6B@ ; Json::DefaultValueAllocator::`vftable'
	DD	FLAT:??_EDefaultValueAllocator@Json@@UAEPAXI@Z
	DD	FLAT:?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z
	DD	FLAT:?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z
	DD	FLAT:?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z
	DD	FLAT:?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z
CONST	ENDS
;	COMDAT ??_R4DefaultValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4DefaultValueAllocator@Json@@6B@ DD 00H		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDefaultValueAllocator@Json@@@8
	DD	FLAT:??_R3DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3DefaultValueAllocator@Json@@8 DD 00H		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2DefaultValueAllocator@Json@@8 DD FLAT:??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 DD FLAT:??_R0?AVDefaultValueAllocator@Json@@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDefaultValueAllocator@Json@@@8
_DATA	SEGMENT
??_R0?AVDefaultValueAllocator@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::DefaultValueAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDefaultValueAllocator@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_7ValueAllocator@Json@@6B@
CONST	SEGMENT
??_7ValueAllocator@Json@@6B@ DD FLAT:??_R4ValueAllocator@Json@@6B@ ; Json::ValueAllocator::`vftable'
	DD	FLAT:??_EValueAllocator@Json@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4ValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4ValueAllocator@Json@@6B@ DD 00H			; Json::ValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVValueAllocator@Json@@@8
	DD	FLAT:??_R3ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3ValueAllocator@Json@@8 DD 00H			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2ValueAllocator@Json@@8 DD FLAT:??_R1A@?0A@EA@ValueAllocator@Json@@8 ; Json::ValueAllocator::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ValueAllocator@Json@@8 DD FLAT:??_R0?AVValueAllocator@Json@@@8 ; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVValueAllocator@Json@@@8
_DATA	SEGMENT
??_R0?AVValueAllocator@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::ValueAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVValueAllocator@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_7StyledWriter@Json@@6B@
CONST	SEGMENT
??_7StyledWriter@Json@@6B@ DD FLAT:??_R4StyledWriter@Json@@6B@ ; Json::StyledWriter::`vftable'
	DD	FLAT:??_EStyledWriter@Json@@UAEPAXI@Z
	DD	FLAT:?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z
CONST	ENDS
;	COMDAT ??_R4StyledWriter@Json@@6B@
rdata$r	SEGMENT
??_R4StyledWriter@Json@@6B@ DD 00H			; Json::StyledWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStyledWriter@Json@@@8
	DD	FLAT:??_R3StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3StyledWriter@Json@@8
rdata$r	SEGMENT
??_R3StyledWriter@Json@@8 DD 00H			; Json::StyledWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2StyledWriter@Json@@8
rdata$r	SEGMENT
??_R2StyledWriter@Json@@8 DD FLAT:??_R1A@?0A@EA@StyledWriter@Json@@8 ; Json::StyledWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Writer@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Writer@Json@@8 DD FLAT:??_R0?AVWriter@Json@@@8 ; Json::Writer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3Writer@Json@@8
rdata$r	SEGMENT
??_R3Writer@Json@@8 DD 00H				; Json::Writer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2Writer@Json@@8
rdata$r	SEGMENT
??_R2Writer@Json@@8 DD FLAT:??_R1A@?0A@EA@Writer@Json@@8 ; Json::Writer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R0?AVWriter@Json@@@8
_DATA	SEGMENT
??_R0?AVWriter@Json@@@8 DD FLAT:??_7type_info@@6B@	; Json::Writer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWriter@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@StyledWriter@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StyledWriter@Json@@8 DD FLAT:??_R0?AVStyledWriter@Json@@@8 ; Json::StyledWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStyledWriter@Json@@@8
_DATA	SEGMENT
??_R0?AVStyledWriter@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::StyledWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStyledWriter@Json@@', 00H
_DATA	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GLFAOOJA@?$FL?4?$AA@
CONST	SEGMENT
??_C@_02GLFAOOJA@?$FL?4?$AA@ DB '[.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doubl@
CONST	SEGMENT
??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doubl@ DB 'Type is not'
	DB	' convertible to double', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint?$AA@
CONST	SEGMENT
??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint?$AA@ DB 'Type is '
	DB	'not convertible to uint', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ran@
CONST	SEGMENT
??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ran@ DB 'Real out of'
	DB	' unsigned integer range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5conv@
CONST	SEGMENT
??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5conv@ DB 'Negative in'
	DB	'teger can not be converted to unsigned integer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int?$AA@
CONST	SEGMENT
??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int?$AA@ DB 'Type is n'
	DB	'ot convertible to int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5range@
CONST	SEGMENT
??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5range@ DB 'Real out of'
	DB	' signed integer range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5ra@
CONST	SEGMENT
??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5ra@ DB 'integer out'
	DB	' of signed integer range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5strin@
CONST	SEGMENT
??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5strin@ DB 'Type is not'
	DB	' convertible to string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1?$AA@
CONST	SEGMENT
??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1?$AA@ DB 'Comments must'
	DB	' start with /', 00H				; `string'
CONST	ENDS
;	COMDAT ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
_DATA	SEGMENT
?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A DD FLAT:?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A ; `Json::valueAllocator'::`2'::valueAllocator
_DATA	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 176  : 	return (true);

	mov	al, 1

; 177  : 	}

	ret	0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Checked_iterator_base, COMDAT
; _this$ = eax

; 292  : 		return this->_Myptr;

	mov	eax, DWORD PTR [eax+4]

; 293  : 	}

	ret	0
?_Checked_iterator_base@?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Checked_iterator_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Checked_iterator_base, COMDAT
; _this$ = eax

; 48   : 		return _Myptr;

	mov	eax, DWORD PTR [eax+4]

; 49   : 	}

	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Checked_iterator_base
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Checked_base@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Different_checked_iterator_base_type_tag>, COMDAT
; __It$ = eax

; 947  : 		return _It._Checked_iterator_base();

	mov	eax, DWORD PTR [eax+4]

; 948  : 	}

	ret	0
??$_Checked_base@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Different_checked_iterator_base_type_tag>, COMDAT
; __It$ = eax

; 947  : 		return _It._Checked_iterator_base();

	mov	eax, DWORD PTR [eax+4]

; 948  : 	}

	ret	0
??$_Checked_base@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Checked_base@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __It$ = eax

; 955  : 		return _It;

	mov	eax, DWORD PTR [eax]

; 956  : 	}

	ret	0
??$_Checked_base@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z
_TEXT	SEGMENT
??$_Checked_base@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z PROC ; std::_Checked_base<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; __It$ = eax

; 972  : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 973  : 		return _Checked_base(_It, _Base_tag);

	mov	eax, DWORD PTR [eax+4]

; 974  : 	}

	ret	0
??$_Checked_base@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ENDP ; std::_Checked_base<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Ptr_cat@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 1291 : 	{

	push	ecx

; 1292 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1293 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1294 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z
_TEXT	SEGMENT
??$_Checked_base@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; __It$ = eax

; 972  : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 973  : 		return _Checked_base(_It, _Base_tag);

	mov	eax, DWORD PTR [eax+4]

; 974  : 	}

	ret	0
??$_Checked_base@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Move_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 1008 : 	{

	push	ecx

; 1009 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1010 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1011 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU_Swap_move_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
??$_Iter_random@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Iter_random<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; ___$ReturnUdt$ = eax

; 802  : 	typename _Iter_random_helper<
; 803  : 		iterator_traits<_Iter1>::iterator_category, 
; 804  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 805  : 	return (_Cat);
; 806  : 	}

	ret	0
??$_Iter_random@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Iter_random<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@@Z
_TEXT	SEGMENT
??$_Checked_base@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@@Z PROC ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __It$ = eax

; 972  : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 973  : 		return _Checked_base(_It, _Base_tag);

	mov	eax, DWORD PTR [eax]

; 974  : 	}

	ret	0
??$_Checked_base@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@@Z ENDP ; std::_Checked_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Ptr_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 1291 : 	{

	push	ecx

; 1292 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1293 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1294 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
PUBLIC	??1CZString@Value@Json@@QAE@XZ			; Json::Value::CZString::~CZString
PUBLIC	??1Value@Json@@QAE@XZ				; Json::Value::~Value
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z$1
__ehfuncinfo$??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
$T29508 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z PROC ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = edi
	push	-1
	push	__ehhandler$??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, eax
	lea	esi, DWORD PTR [edi+16]
	mov	DWORD PTR $T29508[esp+24], esi
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR __$EHRec$[esp+32], 0
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+32], -1
	call	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z$1:
	mov	ecx, DWORD PTR $T29508[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-8]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_G_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAXI@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node><std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT
; _this$ = eax

; 130  : 		{	// construct from a related allocator (do nothing)
; 131  : 		}

	ret	0
??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node><std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z
_TEXT	SEGMENT
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z PROC ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>, COMDAT

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);
; 61   : 	}

	ret	0
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *><std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT
; _this$ = eax

; 130  : 		{	// construct from a related allocator (do nothing)
; 131  : 		}

	ret	0
??$?0U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *><std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
;	COMDAT xdata$x
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
xdata$x	SEGMENT
__unwindtable$??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z$1
__ehfuncinfo$??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z
_TEXT	SEGMENT
$T29697 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z PROC ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>, COMDAT
; __Ptr$ = ecx

; 59   : 	{	// destroy object at _Ptr

	push	-1
	push	__ehhandler$??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, eax

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);

	mov	esi, ecx
	add	esi, 16					; 00000010H
	mov	DWORD PTR $T29697[esp+24], esi
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR __$EHRec$[esp+32], 0
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+32], -1
	call	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString

; 61   : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z$1:
	mov	ecx, DWORD PTR $T29697[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-8]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT
; __Left$ = ecx
; __Right$ = eax

; 18   : 	_Ty _Tmp = _Left;

	mov	dl, BYTE PTR [ecx]
	push	ebx

; 19   : 	_Left = _Right, _Right = _Tmp;

	mov	bl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], bl
	mov	BYTE PTR [eax], dl
	pop	ebx

; 20   : 	}

	ret	0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
??Y?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator+=, COMDAT
; _this$ = edi
; __Off$ = ebx

; 147  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	cmp	DWORD PTR [edi], 0
	jne	SHORT $LN3@operator@8
	call	__invalid_parameter_noinfo
$LN3@operator@8:

; 148  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	push	esi
	lea	esi, DWORD PTR [ebx*8]
	sub	esi, ebx
	add	esi, esi
	add	esi, esi
	add	eax, esi
	cmp	eax, DWORD PTR [ecx+8]
	ja	SHORT $LN1@operator@8
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN6@operator@8
$LN1@operator@8:

; 149  : 			_Myptr + _Off <= ((_Myvec *)(this->_Mycont))->_Mylast &&
; 150  : 			_Myptr + _Off >= ((_Myvec *)(this->_Mycont))->_Myfirst);

	call	__invalid_parameter_noinfo
$LN6@operator@8:

; 151  : 		_Myptr += _Off;

	add	DWORD PTR [edi+4], esi

; 152  : 		return (*this);

	mov	eax, edi
	pop	esi

; 153  : 		}

	ret	0
??Y?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\map
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@QAE@U?$less@VCZString@Value@Json@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@QAE@U?$less@VCZString@Value@Json@@@1@@Z PROC ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>, COMDAT
; _this$ = eax

; 44   : 		}

	ret	4
??0?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@QAE@U?$less@VCZString@Value@Json@@@1@@Z ENDP ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
??Y?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator+=, COMDAT
; _this$ = edi
; __Off$ = ebx

; 362  : 		(*(_Mybase *)this) += _Off;

	cmp	DWORD PTR [edi], 0
	jne	SHORT $LN5@operator@9
	call	__invalid_parameter_noinfo
$LN5@operator@9:
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	push	esi
	lea	esi, DWORD PTR [ebx*8]
	sub	esi, ebx
	add	esi, esi
	add	esi, esi
	add	eax, esi
	cmp	eax, DWORD PTR [ecx+8]
	ja	SHORT $LN3@operator@9
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN8@operator@9
$LN3@operator@9:
	call	__invalid_parameter_noinfo
$LN8@operator@9:
	add	DWORD PTR [edi+4], esi

; 363  : 		return (*this);

	mov	eax, edi
	pop	esi

; 364  : 		}

	ret	0
??Y?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
??G?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-, COMDAT
; _this$ = edi
; __Right$ = esi

; 174  : 
; 175  :  #if _HAS_ITERATOR_DEBUGGING
; 176  : 		_Compat(_Right);
; 177  :  #else
; 178  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN1@operator@10
	cmp	eax, DWORD PTR [esi]
	je	SHORT $LN2@operator@10
$LN1@operator@10:
	call	__invalid_parameter_noinfo
$LN2@operator@10:

; 179  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 180  : 
; 181  : 		return (_Myptr - _Right._Myptr);

	mov	ecx, DWORD PTR [edi+4]
	sub	ecx, DWORD PTR [esi+4]
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 182  : 		}

	ret	0
??G?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = eax

; 58   : 		}

	ret	4
??0?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ??G?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z
_TEXT	SEGMENT
??G?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z PROC ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-, COMDAT
; _this$ = edi
; __Right$ = esi

; 385  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN3@operator@11
	cmp	eax, DWORD PTR [esi]
	je	SHORT $LN4@operator@11
$LN3@operator@11:
	call	__invalid_parameter_noinfo
$LN4@operator@11:
	mov	ecx, DWORD PTR [edi+4]
	sub	ecx, DWORD PTR [esi+4]
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 386  : 		}

	ret	0
??G?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEHABV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z ENDP ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??H?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??H?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator+, COMDAT
; _this$ = eax
; __Off$ = ebx

; 367  : 		{	// return this + integer

	push	ebp
	mov	ebp, DWORD PTR ___$ReturnUdt$[esp]
	push	esi

; 368  : 		_Myt _Tmp = *this;

	mov	esi, DWORD PTR [eax]

; 369  : 		return (_Tmp += _Off);

	test	esi, esi
	push	edi
	mov	edi, DWORD PTR [eax+4]
	jne	SHORT $LN7@operator@12
	call	__invalid_parameter_noinfo
$LN7@operator@12:
	lea	eax, DWORD PTR [ebx*8]
	sub	eax, ebx
	lea	edi, DWORD PTR [edi+eax*4]
	cmp	edi, DWORD PTR [esi+8]
	ja	SHORT $LN5@operator@12
	cmp	edi, DWORD PTR [esi+4]
	jae	SHORT $LN6@operator@12
$LN5@operator@12:
	call	__invalid_parameter_noinfo
$LN6@operator@12:
	mov	DWORD PTR [ebp+4], edi

; 370  : 		}

	pop	edi
	mov	DWORD PTR [ebp], esi
	pop	esi
	mov	eax, ebp
	pop	ebp
	ret	4
??H?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator+
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size, COMDAT

; 166  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 167  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 153391689				; 09249249H

; 168  : 		}

	ret	0
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>::destroy, COMDAT

; 161  : 		_Destroy(_Ptr);
; 162  : 		}

	ret	0
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>::destroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT
; _this$ = eax

; 125  : 		{	// construct by copying (do nothing)
; 126  : 		}

	ret	0
??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Tree_ptr@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::_Tree_ptr<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_ptr<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = eax

; 84   : 		}

	ret	4
??0?$_Tree_ptr@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::_Tree_ptr<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_ptr<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; __Ptr$ = eax

; 141  : 		::operator delete(_Ptr);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 142  : 		}

	ret	0
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = eax

; 125  : 		{	// construct by copying (do nothing)
; 126  : 		}

	ret	0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = eax

; 121  : 		{	// construct default allocator (do nothing)
; 122  : 		}

	ret	0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = eax

; 413  : 		}

	ret	4
??0?$_Vector_val@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT

; 708  : 		return (this->_Alval.max_size());

	mov	eax, 153391689				; 09249249H

; 709  : 		}

	ret	0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 703  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	jne	SHORT $LN3@size

; 704  : 		}

	ret	0
$LN3@size:

; 703  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

	mov	ecx, DWORD PTR [ecx+8]
	sub	ecx, eax
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 704  : 		}

	ret	0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity, COMDAT
; _this$ = ecx

; 622  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	jne	SHORT $LN3@capacity

; 623  : 		}

	ret	0
$LN3@capacity:

; 622  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	ecx, DWORD PTR [ecx+12]
	sub	ecx, eax
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 623  : 		}

	ret	0
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@3@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = eax

; 396  : 			return (_Ptr);

	mov	eax, DWORD PTR [eax+4]

; 397  : 			}

	ret	0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
;	COMDAT xdata$x
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
xdata$x	SEGMENT
__unwindtable$?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z$1
__ehfuncinfo$?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
$T29994 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::destroy, COMDAT
; __Ptr$ = ecx

; 160  : 		{	// destroy object at _Ptr

	push	-1
	push	__ehhandler$?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, eax

; 161  : 		_Destroy(_Ptr);

	mov	esi, ecx
	add	esi, 16					; 00000010H
	mov	DWORD PTR $T29994[esp+24], esi
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR __$EHRec$[esp+32], 0
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+32], -1
	call	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString

; 162  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z$1:
	mov	ecx, DWORD PTR $T29994[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-8]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::deallocate, COMDAT
; __Ptr$ = eax

; 141  : 		::operator delete(_Ptr);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 142  : 		}

	ret	0
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::deallocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT
; _this$ = eax

; 121  : 		{	// construct default allocator (do nothing)
; 122  : 		}

	ret	0
??0?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >::allocator<std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\map
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z
_TEXT	SEGMENT
?_Kfn@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z PROC ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn, COMDAT
; __Val$ = eax

; 69   : 		return (_Val.first);
; 70   : 		}

	ret	0
?_Kfn@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ENDP ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = eax

; 103  : 		}

	ret	4
??0?$_Tree_val@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE@ABU?$less@VCZString@Value@Json@@@1@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_val<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
?_Myval@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myval, COMDAT
; __Pnode$ = eax

; 171  : 		return ((_Vref)(*_Pnode)._Myval);

	add	eax, 16					; 00000010H

; 172  : 		}

	ret	0
?_Myval@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myval
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
?_Right@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Right, COMDAT
; __Pnode$ = eax

; 166  : 		return ((_Nodepref)(*_Pnode)._Right);

	add	eax, 8

; 167  : 		}

	ret	0
?_Right@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Right
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
?_Parent@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Parent, COMDAT
; __Pnode$ = eax

; 161  : 		return ((_Nodepref)(*_Pnode)._Parent);

	add	eax, 4

; 162  : 		}

	ret	0
?_Parent@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Parent
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
?_Left@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Left, COMDAT
; __Pnode$ = eax

; 156  : 		return ((_Nodepref)(*_Pnode)._Left);
; 157  : 		}

	ret	0
?_Left@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Left
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAABVCZString@Value@Json@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAABVCZString@Value@Json@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key, COMDAT
; __Pnode$ = eax

; 151  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

	add	eax, 16					; 00000010H

; 152  : 		}

	ret	0
?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAABVCZString@Value@Json@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
?_Isnil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Isnil, COMDAT
; __Pnode$ = eax

; 146  : 		return ((_Charref)(*_Pnode)._Isnil);

	add	eax, 41					; 00000029H

; 147  : 		}

	ret	0
?_Isnil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Isnil
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
?_Color@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Color, COMDAT
; __Pnode$ = eax

; 141  : 		return ((_Charref)(*_Pnode)._Color);

	add	eax, 40					; 00000028H

; 142  : 		}

	ret	0
?_Color@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Color
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
??8const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NABV012@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator==, COMDAT
; _this$ = edi
; __Right$ = esi

; 289  : 
; 290  :  #if _HAS_ITERATOR_DEBUGGING
; 291  : 			if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)
; 292  : 				{
; 293  : 				_DEBUG_ERROR("map/set iterators incompatible");
; 294  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 295  : 				}
; 296  :  #else
; 297  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN1@operator@13
	cmp	eax, DWORD PTR [esi]
	je	SHORT $LN2@operator@13
$LN1@operator@13:
	call	__invalid_parameter_noinfo
$LN2@operator@13:

; 298  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 299  : 
; 300  : 			return (_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR [edi+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+4]
	sete	cl
	mov	al, cl

; 301  : 			}

	ret	0
??8const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator==
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator*, COMDAT
; _this$ = esi

; 240  : 
; 241  :  #if _HAS_ITERATOR_DEBUGGING
; 242  : 			if (this->_Mycont == 0
; 243  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 244  : 				{
; 245  : 				_DEBUG_ERROR("map/set iterator not dereferencable");
; 246  : 				_SCL_SECURE_OUT_OF_RANGE;
; 247  : 				}
; 248  :  #else
; 249  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN2@operator@14
	call	__invalid_parameter_noinfo
$LN2@operator@14:

; 250  : 			_SCL_SECURE_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Mycont))->_Myhead);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN1@operator@14
	call	__invalid_parameter_noinfo
$LN1@operator@14:

; 251  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 252  : 
; 253  : 			return (_Myval(_Ptr));

	mov	eax, DWORD PTR [esi+4]
	add	eax, 16					; 00000010H

; 254  : 			}

	ret	0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size, COMDAT
; _this$ = eax

; 582  : 		return (_Mysize);

	mov	eax, DWORD PTR [eax+8]

; 583  : 		}

	ret	0
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size
_TEXT	ENDS
PUBLIC	?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z
_TEXT	SEGMENT
?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z PROC ; Json::Value::hasComment, COMDAT
; _this$ = eax
; _placement$ = ecx

; 1347 :    return comments_ != 0  &&  comments_[placement].comment_ != 0;

	mov	eax, DWORD PTR [eax+12]
	test	eax, eax
	je	SHORT $LN3@hasComment
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN3@hasComment
	mov	eax, 1

; 1348 : }

	ret	0
$LN3@hasComment:

; 1347 :    return comments_ != 0  &&  comments_[placement].comment_ != 0;

	xor	eax, eax

; 1348 : }

	ret	0
?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ENDP ; Json::Value::hasComment
_TEXT	ENDS
PUBLIC	?isObject@Value@Json@@QBE_NXZ			; Json::Value::isObject
; Function compile flags: /Ogtpy
;	COMDAT ?isObject@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isObject@Value@Json@@QBE_NXZ PROC			; Json::Value::isObject, COMDAT
; _this$ = eax

; 1322 :    return type_ == nullValue  ||  type_ == objectValue;

	mov	al, BYTE PTR [eax+8]
	test	al, al
	je	SHORT $LN3@isObject
	cmp	al, 7
	je	SHORT $LN3@isObject
	xor	eax, eax

; 1323 : }

	ret	0
$LN3@isObject:

; 1322 :    return type_ == nullValue  ||  type_ == objectValue;

	mov	eax, 1

; 1323 : }

	ret	0
?isObject@Value@Json@@QBE_NXZ ENDP			; Json::Value::isObject
_TEXT	ENDS
PUBLIC	?isArray@Value@Json@@QBE_NXZ			; Json::Value::isArray
; Function compile flags: /Ogtpy
;	COMDAT ?isArray@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isArray@Value@Json@@QBE_NXZ PROC			; Json::Value::isArray, COMDAT
; _this$ = eax

; 1315 :    return type_ == nullValue  ||  type_ == arrayValue;

	mov	al, BYTE PTR [eax+8]
	test	al, al
	je	SHORT $LN3@isArray
	cmp	al, 6
	je	SHORT $LN3@isArray
	xor	eax, eax

; 1316 : }

	ret	0
$LN3@isArray:

; 1315 :    return type_ == nullValue  ||  type_ == arrayValue;

	mov	eax, 1

; 1316 : }

	ret	0
?isArray@Value@Json@@QBE_NXZ ENDP			; Json::Value::isArray
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	?asBool@Value@Json@@QBE_NXZ			; Json::Value::asBool
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
; File c:\program files\microsoft visual studio 8\vc\include\xtree
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
CONST	ENDS
;	COMDAT ?asBool@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?asBool@Value@Json@@QBE_NXZ PROC			; Json::Value::asBool, COMDAT
; _this$ = eax

; 797  :    switch ( type_ )

	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 7
	ja	SHORT $LN1@asBool
	jmp	DWORD PTR $LN19@asBool[ecx*4]
$LN6@asBool:

; 798  :    {
; 799  :    case nullValue:
; 800  :       return false;
; 801  :    case intValue:
; 802  :    case uintValue:
; 803  :       return value_.int_ != 0;

	xor	ecx, ecx
	cmp	DWORD PTR [eax], ecx
	setne	cl
	mov	al, cl

; 817  : }

	ret	0
$LN5@asBool:

; 804  :    case realValue:
; 805  :       return value_.real_ != 0.0;

	fldz
	fcomp	QWORD PTR [eax]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@asBool
$LN12@asBool:
	xor	eax, eax

; 817  : }

	ret	0
$LN4@asBool:

; 806  :    case booleanValue:
; 807  :       return value_.bool_;

	mov	al, BYTE PTR [eax]

; 817  : }

	ret	0
$LN3@asBool:

; 808  :    case stringValue:
; 809  :       return value_.string_  &&  value_.string_[0] != 0;

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN12@asBool
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN12@asBool
$LN18@asBool:
	mov	eax, 1

; 817  : }

	ret	0
$LN2@asBool:

; 810  :    case arrayValue:
; 811  :    case objectValue:
; 812  :       return value_.map_->size() != 0;

	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	DWORD PTR [edx+8], eax
	setne	al

; 817  : }

	ret	0
$LN1@asBool:

; 813  :    default:
; 814  :       JSON_ASSERT_UNREACHABLE;
; 815  :    }
; 816  :    return false; // unreachable;

	xor	al, al

; 817  : }

	ret	0
	npad	2
$LN19@asBool:
	DD	$LN1@asBool
	DD	$LN6@asBool
	DD	$LN6@asBool
	DD	$LN5@asBool
	DD	$LN3@asBool
	DD	$LN4@asBool
	DD	$LN2@asBool
	DD	$LN2@asBool
?asBool@Value@Json@@QBE_NXZ ENDP			; Json::Value::asBool
_TEXT	ENDS
PUBLIC	?asCString@Value@Json@@QBEPBDXZ			; Json::Value::asCString
; Function compile flags: /Ogtpy
;	COMDAT ?asCString@Value@Json@@QBEPBDXZ
_TEXT	SEGMENT
?asCString@Value@Json@@QBEPBDXZ PROC			; Json::Value::asCString, COMDAT
; _this$ = eax

; 679  :    JSON_ASSERT( type_ == stringValue );
; 680  :    return value_.string_;

	mov	eax, DWORD PTR [eax]

; 681  : }

	ret	0
?asCString@Value@Json@@QBEPBDXZ ENDP			; Json::Value::asCString
_TEXT	ENDS
PUBLIC	?type@Value@Json@@QBE?AW4ValueType@2@XZ		; Json::Value::type
; Function compile flags: /Ogtpy
;	COMDAT ?type@Value@Json@@QBE?AW4ValueType@2@XZ
_TEXT	SEGMENT
?type@Value@Json@@QBE?AW4ValueType@2@XZ PROC		; Json::Value::type, COMDAT
; _this$ = eax

; 530  :    return type_;

	movsx	eax, BYTE PTR [eax+8]

; 531  : }

	ret	0
?type@Value@Json@@QBE?AW4ValueType@2@XZ ENDP		; Json::Value::type
_TEXT	ENDS
PUBLIC	?c_str@CZString@Value@Json@@QBEPBDXZ		; Json::Value::CZString::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@CZString@Value@Json@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@CZString@Value@Json@@QBEPBDXZ PROC		; Json::Value::CZString::c_str, COMDAT
; _this$ = eax

; 244  :    return cstr_;

	mov	eax, DWORD PTR [eax]

; 245  : }

	ret	0
?c_str@CZString@Value@Json@@QBEPBDXZ ENDP		; Json::Value::CZString::c_str
_TEXT	ENDS
PUBLIC	?index@CZString@Value@Json@@QBEHXZ		; Json::Value::CZString::index
; Function compile flags: /Ogtpy
;	COMDAT ?index@CZString@Value@Json@@QBEHXZ
_TEXT	SEGMENT
?index@CZString@Value@Json@@QBEHXZ PROC			; Json::Value::CZString::index, COMDAT
; _this$ = eax

; 237  :    return index_;

	mov	eax, DWORD PTR [eax+4]

; 238  : }

	ret	0
?index@CZString@Value@Json@@QBEHXZ ENDP			; Json::Value::CZString::index
_TEXT	ENDS
PUBLIC	??MCZString@Value@Json@@QBE_NABV012@@Z		; Json::Value::CZString::operator<
; Function compile flags: /Ogtpy
;	COMDAT ??MCZString@Value@Json@@QBE_NABV012@@Z
_TEXT	SEGMENT
??MCZString@Value@Json@@QBE_NABV012@@Z PROC		; Json::Value::CZString::operator<, COMDAT
; _this$ = edx
; _other$ = ecx

; 220  :    if ( cstr_ )

	mov	eax, DWORD PTR [edx]
	test	eax, eax
	je	SHORT $LN1@operator@15

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	ecx, DWORD PTR [ecx]
$LL4@operator@15:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN5@operator@15
	test	dl, dl
	je	SHORT $LN6@operator@15
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN5@operator@15
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL4@operator@15
$LN6@operator@15:
	xor	eax, eax
	xor	ecx, ecx
	test	eax, eax
	setl	cl
	mov	al, cl

; 223  : }

	ret	0
$LN5@operator@15:

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	sbb	eax, eax
	sbb	eax, -1
	xor	ecx, ecx
	test	eax, eax
	setl	cl
	mov	al, cl

; 223  : }

	ret	0
$LN1@operator@15:

; 222  :    return index_ < other.index_;

	mov	edx, DWORD PTR [edx+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setl	al

; 223  : }

	ret	0
??MCZString@Value@Json@@QBE_NABV012@@Z ENDP		; Json::Value::CZString::operator<
_TEXT	ENDS
PUBLIC	??0CZString@Value@Json@@QAE@H@Z			; Json::Value::CZString::CZString
; Function compile flags: /Ogtpy
;	COMDAT ??0CZString@Value@Json@@QAE@H@Z
_TEXT	SEGMENT
??0CZString@Value@Json@@QAE@H@Z PROC			; Json::Value::CZString::CZString, COMDAT
; _this$ = eax
; _index$ = ecx

; 177  : {

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], ecx

; 178  : }

	ret	0
??0CZString@Value@Json@@QAE@H@Z ENDP			; Json::Value::CZString::CZString
_TEXT	ENDS
PUBLIC	??0CommentInfo@Value@Json@@QAE@XZ		; Json::Value::CommentInfo::CommentInfo
; Function compile flags: /Ogtpy
;	COMDAT ??0CommentInfo@Value@Json@@QAE@XZ
_TEXT	SEGMENT
??0CommentInfo@Value@Json@@QAE@XZ PROC			; Json::Value::CommentInfo::CommentInfo, COMDAT
; _this$ = ecx

; 140  : {

	mov	eax, ecx
	mov	DWORD PTR [eax], 0

; 141  : }

	ret	0
??0CommentInfo@Value@Json@@QAE@XZ ENDP			; Json::Value::CommentInfo::CommentInfo
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0ValueAllocator@Json@@QAE@XZ
_TEXT	SEGMENT
??0ValueAllocator@Json@@QAE@XZ PROC			; Json::ValueAllocator::ValueAllocator, COMDAT
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7ValueAllocator@Json@@6B@
	mov	eax, OFFSET ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
	ret	0
??0ValueAllocator@Json@@QAE@XZ ENDP			; Json::ValueAllocator::ValueAllocator
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z PROC ; Json::DefaultValueAllocator::releaseStringValue, COMDAT
; _this$ = ecx

; 93   :       if ( value )

	mov	eax, DWORD PTR _value$[esp-4]
	test	eax, eax
	je	SHORT $LN1@releaseStr

; 94   :          free( value );

	push	eax
	call	_free
	pop	ecx
$LN1@releaseStr:

; 95   :    }

	ret	4
?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z ENDP ; Json::DefaultValueAllocator::releaseStringValue
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_length$ = 12						; size = 4
?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z PROC ; Json::DefaultValueAllocator::duplicateStringValue, COMDAT
; _this$ = ecx

; 78   :    {

	push	ebx

; 79   :       //@todo invesgate this old optimization
; 80   :       //if ( !value  ||  value[0] == 0 )
; 81   :       //   return 0;
; 82   : 
; 83   :       if ( length == unknown )

	mov	ebx, DWORD PTR _value$[esp]
	push	esi
	mov	esi, DWORD PTR _length$[esp+4]
	cmp	esi, -1
	push	edi
	jne	SHORT $LN1@duplicateS

; 84   :          length = (unsigned int)strlen(value);

	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL4@duplicateS:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL4@duplicateS
	sub	eax, edx
	mov	esi, eax
$LN1@duplicateS:

; 85   :       char *newString = static_cast<char *>( malloc( length + 1 ) );

	lea	eax, DWORD PTR [esi+1]
	push	eax
	call	_malloc

; 86   :       memcpy( newString, value, length );

	push	esi
	mov	edi, eax
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 16					; 00000010H

; 87   :       newString[length] = 0;

	mov	BYTE PTR [edi+esi], 0

; 88   :       return newString;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 89   :    }

	ret	8
?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z ENDP ; Json::DefaultValueAllocator::duplicateStringValue
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z
_TEXT	SEGMENT
_memberName$ = 8					; size = 4
?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z PROC ; Json::DefaultValueAllocator::releaseMemberName, COMDAT
; _this$ = ecx

; 73   :       releaseStringValue( memberName );

	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+16]
	jmp	eax
?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z ENDP ; Json::DefaultValueAllocator::releaseMemberName
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z
_TEXT	SEGMENT
_memberName$ = 8					; size = 4
?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z PROC ; Json::DefaultValueAllocator::makeMemberName, COMDAT
; _this$ = ecx

; 68   :       return duplicateStringValue( memberName );

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _memberName$[esp-4]
	mov	eax, DWORD PTR [eax+12]
	push	-1
	push	edx
	call	eax

; 69   :    }

	ret	4
?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z ENDP ; Json::DefaultValueAllocator::makeMemberName
_TEXT	ENDS
PUBLIC	??1ValueAllocator@Json@@UAE@XZ			; Json::ValueAllocator::~ValueAllocator
; Function compile flags: /Ogtpy
;	COMDAT ??1ValueAllocator@Json@@UAE@XZ
_TEXT	SEGMENT
??1ValueAllocator@Json@@UAE@XZ PROC			; Json::ValueAllocator::~ValueAllocator, COMDAT
; _this$ = ecx

; 56   : {

	mov	DWORD PTR [ecx], OFFSET ??_7ValueAllocator@Json@@6B@

; 57   : }

	ret	0
??1ValueAllocator@Json@@UAE@XZ ENDP			; Json::ValueAllocator::~ValueAllocator
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 52   : 	void _FARQ *_Vptr = _Ptr;
; 53   : 	::new (_Vptr) _T1(_Val);

	test	eax, eax
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Construct:

; 54   : 	}

	ret	0
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T31187 = -16						; size = 4
$T31179 = -12						; size = 12
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>, COMDAT
; __Count$ = ecx

; 38   : 	if (_Count <= 0)
; 39   : 		_Count = 0;
; 40   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	sub	esp, 16					; 00000010H
	cmp	eax, 48					; 00000030H
	jae	SHORT $LN1@Allocate

; 41   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T31187[esp+16]
	push	eax
	lea	ecx, DWORD PTR $T31179[esp+20]
	mov	DWORD PTR $T31187[esp+20], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T31179[esp+20]
	push	ecx
	mov	DWORD PTR $T31179[esp+24], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@Allocate:
$LN1@Allocate:

; 42   : 
; 43   : 		// allocate storage for _Count elements of type _Ty
; 44   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx+ecx*2]
	shl	edx, 4
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 45   : 	}

	add	esp, 16					; 00000010H
	ret	0
$LN12@Allocate:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z
_TEXT	SEGMENT
$T31201 = -16						; size = 4
$T31193 = -12						; size = 12
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z PROC ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __Count$ = ecx

; 38   : 	if (_Count <= 0)
; 39   : 		_Count = 0;
; 40   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	sub	esp, 16					; 00000010H
	cmp	eax, 28					; 0000001cH
	jae	SHORT $LN1@Allocate@2

; 41   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T31201[esp+16]
	push	eax
	lea	ecx, DWORD PTR $T31193[esp+20]
	mov	DWORD PTR $T31201[esp+20], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T31193[esp+20]
	push	ecx
	mov	DWORD PTR $T31193[esp+24], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@Allocate@2:
$LN1@Allocate@2:

; 42   : 
; 43   : 		// allocate storage for _Count elements of type _Ty
; 44   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	add	edx, edx
	add	edx, edx
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 45   : 	}

	add	esp, 16					; 00000010H
	ret	0
$LN12@Allocate@2:
??$_Allocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IPAV10@@Z ENDP ; std::_Allocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>::construct, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 156  : 		_Construct(_Ptr, _Val);

	test	eax, eax
	je	SHORT $LN5@construct
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@construct:

; 157  : 		}

	ret	0
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node *>::construct
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocate, COMDAT

; 146  : 		return (_Allocate(_Count, (pointer)0));

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 147  : 		}

	ret	0
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node>::allocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Ranit@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HPBV12@ABV12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HPBV12@ABV12@@std@@QAE@XZ PROC ; std::_Ranit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Ranit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = eax
	mov	DWORD PTR [eax], 0
	ret	0
??0?$_Ranit@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HPBV12@ABV12@@std@@QAE@XZ ENDP ; std::_Ranit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Ranit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base@1@@Z
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base@1@@Z PROC ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = edi
; __Ptr$ = ebx
; __Pvector$ = esi

; 78   : 		{	// construct with pointer _Ptr
; 79   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	test	esi, esi
	mov	DWORD PTR [edi], 0
	je	SHORT $LN1@Vector_con
	cmp	DWORD PTR [esi+4], ebx
	ja	SHORT $LN1@Vector_con
	cmp	ebx, DWORD PTR [esi+8]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	call	__invalid_parameter_noinfo
$LN2@Vector_con:

; 80   : 		this->_Mycont = _Pvector;

	mov	DWORD PTR [edi], esi

; 81   : 		_Myptr = _Ptr;

	mov	DWORD PTR [edi+4], ebx

; 82   : 		}

	mov	eax, edi
	ret	0
??0?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base@1@@Z ENDP ; std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode, COMDAT

; 1290 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 1291 : 		int _Linkcnt = 0;
; 1292 : 
; 1293 : 		_TRY_BEGIN
; 1294 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

	test	eax, eax
	je	SHORT $LN27@Buynode
	mov	DWORD PTR [eax], 0
$LN27@Buynode:

; 1295 : 		++_Linkcnt;
; 1296 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

	lea	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN37@Buynode
	mov	DWORD PTR [ecx], 0
$LN37@Buynode:

; 1297 : 		++_Linkcnt;
; 1298 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

	lea	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN47@Buynode
	mov	DWORD PTR [ecx], 0
$LN47@Buynode:

; 1299 : 		_CATCH_ALL
; 1300 : 		if (1 < _Linkcnt)
; 1301 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1302 : 		if (0 < _Linkcnt)
; 1303 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1304 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1305 : 		_RERAISE;
; 1306 : 		_CATCH_END
; 1307 : 		_Color(_Wherenode) = _Black;

	mov	BYTE PTR [eax+40], 1

; 1308 : 		_Isnil(_Wherenode) = false;

	mov	BYTE PTR [eax+41], 0

; 1309 : 		return (_Wherenode);
; 1310 : 		}

	ret	0
?_Buynode@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Bidit@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<std::pair<Json::Value::CZString const ,Json::Value>,int,std::pair<Json::Value::CZString const ,Json::Value> const *,std::pair<Json::Value::CZString const ,Json::Value> const &>::_Bidit<std::pair<Json::Value::CZString const ,Json::Value>,int,std::pair<Json::Value::CZString const ,Json::Value> const *,std::pair<Json::Value::CZString const ,Json::Value> const &>, COMDAT
; _this$ = eax
	mov	DWORD PTR [eax], 0
	ret	0
??0?$_Bidit@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<std::pair<Json::Value::CZString const ,Json::Value>,int,std::pair<Json::Value::CZString const ,Json::Value> const *,std::pair<Json::Value::CZString const ,Json::Value> const &>::_Bidit<std::pair<Json::Value::CZString const ,Json::Value>,int,std::pair<Json::Value::CZString const ,Json::Value> const *,std::pair<Json::Value::CZString const ,Json::Value> const &>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
$T31416 = -16						; size = 4
$T31418 = -12						; size = 12
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; __Count$ = ecx

; 145  : 		{	// allocate array of _Count elements

	sub	esp, 16					; 00000010H

; 146  : 		return (_Allocate(_Count, (pointer)0));

	test	ecx, ecx
	ja	SHORT $LN5@allocate
	xor	ecx, ecx
$LN3@allocate:
	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	add	edx, edx
	add	edx, edx
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 147  : 		}

	add	esp, 16					; 00000010H
	ret	0

; 146  : 		return (_Allocate(_Count, (pointer)0));

$LN5@allocate:
	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 28					; 0000001cH
	jae	SHORT $LN3@allocate
	lea	eax, DWORD PTR $T31416[esp+16]
	push	eax
	lea	ecx, DWORD PTR $T31418[esp+20]
	mov	DWORD PTR $T31416[esp+20], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T31418[esp+20]
	push	ecx
	mov	DWORD PTR $T31418[esp+24], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN12@allocate:
$LN11@allocate:
	int	3
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ
_TEXT	SEGMENT
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi

; 642  : 		{	// return iterator for end of nonmutable sequence

	push	ebx

; 643  : 		return (const_iterator(_Mylast, this));

	mov	ebx, DWORD PTR [edi+8]
	cmp	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [esi], 0
	jbe	SHORT $LN4@end
	call	__invalid_parameter_noinfo
$LN4@end:
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi], edi
	mov	eax, esi
	pop	ebx

; 644  : 		}

	ret	0
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ
_TEXT	SEGMENT
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi

; 632  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebx

; 633  : 		return (const_iterator(_Myfirst, this));

	mov	ebx, DWORD PTR [edi+4]
	cmp	ebx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi], 0
	jbe	SHORT $LN4@begin
	call	__invalid_parameter_noinfo
$LN4@begin:
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi], edi
	mov	eax, esi
	pop	ebx

; 634  : 		}

	ret	0
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\functional
_TEXT	ENDS
;	COMDAT ??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z
_TEXT	SEGMENT
??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z PROC ; std::less<Json::Value::CZString>::operator(), COMDAT
; __Left$ = edx
; __Right$ = ecx

; 143  : 		return (_Left < _Right);

	mov	eax, DWORD PTR [edx]
	test	eax, eax
	je	SHORT $LN3@operator@20
	mov	ecx, DWORD PTR [ecx]
$LL6@operator@20:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN7@operator@20
	test	dl, dl
	je	SHORT $LN8@operator@20
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN7@operator@20
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL6@operator@20
$LN8@operator@20:
	xor	eax, eax
	test	eax, eax
	setl	al

; 144  : 		}

	ret	0
$LN7@operator@20:

; 143  : 		return (_Left < _Right);

	sbb	eax, eax
	sbb	eax, -1
	test	eax, eax
	setl	al

; 144  : 		}

	ret	0

; 143  : 		return (_Left < _Right);

$LN3@operator@20:
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [ecx+4]
	setl	al

; 144  : 		}

	ret	0
??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ENDP ; std::less<Json::Value::CZString>::operator()
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Root, COMDAT
; _this$ = eax

; 1231 : 		return (_Parent(_Myhead));

	mov	eax, DWORD PTR [eax+4]
	add	eax, 4

; 1232 : 		}

	ret	0
?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Root
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rmost, COMDAT
; _this$ = eax

; 1226 : 		return (_Right(_Myhead));

	mov	eax, DWORD PTR [eax+4]
	add	eax, 8

; 1227 : 		}

	ret	0
?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rmost
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
?_Min@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Min, COMDAT
; __Pnode$ = eax

; 1219 : 		while (!_Isnil(_Left(_Pnode)))

	mov	ecx, DWORD PTR [eax]
	cmp	BYTE PTR [ecx+41], 0
	jne	SHORT $LN1@Min
$LL2@Min:

; 1220 : 			_Pnode = _Left(_Pnode);

	mov	eax, ecx
	mov	ecx, DWORD PTR [eax]
	cmp	BYTE PTR [ecx+41], 0
	je	SHORT $LL2@Min
$LN1@Min:

; 1221 : 		return (_Pnode);
; 1222 : 		}

	ret	0
?_Min@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Min
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
?_Max@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Max, COMDAT
; __Pnode$ = eax

; 1212 : 		while (!_Isnil(_Right(_Pnode)))

	mov	ecx, DWORD PTR [eax+8]
	cmp	BYTE PTR [ecx+41], 0
	jne	SHORT $LN1@Max
	npad	7
$LL2@Max:

; 1213 : 			_Pnode = _Right(_Pnode);

	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+8]
	cmp	BYTE PTR [ecx+41], 0
	je	SHORT $LL2@Max
$LN1@Max:

; 1214 : 		return (_Pnode);
; 1215 : 		}

	ret	0
?_Max@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Max
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate, COMDAT
; __Wherenode$ = ecx

; 1192 : 		_Nodeptr _Pnode = _Right(_Wherenode);

	mov	eax, DWORD PTR [ecx+8]

; 1193 : 		_Right(_Wherenode) = _Left(_Pnode);

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], edx

; 1194 : 
; 1195 : 		if (!_Isnil(_Left(_Pnode)))

	mov	edx, DWORD PTR [eax]
	cmp	BYTE PTR [edx+41], 0
	jne	SHORT $LN5@Lrotate

; 1196 : 			_Parent(_Left(_Pnode)) = _Wherenode;

	mov	DWORD PTR [edx+4], ecx
$LN5@Lrotate:

; 1197 : 		_Parent(_Pnode) = _Parent(_Wherenode);

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 1198 : 
; 1199 : 		if (_Wherenode == _Root())

	mov	edx, DWORD PTR _this$[esp-4]
	mov	edx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [edx+4]
	jne	SHORT $LN4@Lrotate

; 1200 : 			_Root() = _Pnode;

	mov	DWORD PTR [edx+4], eax

; 1205 : 
; 1206 : 		_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax], ecx

; 1207 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [ecx+4], eax

; 1208 : 		}

	ret	4
$LN4@Lrotate:

; 1201 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

	mov	edx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [edx]
	jne	SHORT $LN2@Lrotate

; 1202 : 			_Left(_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [edx], eax

; 1205 : 
; 1206 : 		_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax], ecx

; 1207 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [ecx+4], eax

; 1208 : 		}

	ret	4
$LN2@Lrotate:

; 1203 : 		else
; 1204 : 			_Right(_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [edx+8], eax

; 1205 : 
; 1206 : 		_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax], ecx

; 1207 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [ecx+4], eax

; 1208 : 		}

	ret	4
?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lmost, COMDAT
; _this$ = eax

; 1187 : 		return (_Left(_Myhead));

	mov	eax, DWORD PTR [eax+4]

; 1188 : 		}

	ret	0
?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lmost
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound, COMDAT
; _this$ = eax
; __Keyval$ = edi

; 1170 : 		_Nodeptr _Pnode = _Root();

	mov	eax, DWORD PTR [eax+4]
	push	esi
	mov	esi, DWORD PTR [eax+4]

; 1171 : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 1172 : 
; 1173 : 		while (!_Isnil(_Pnode))

	cmp	BYTE PTR [esi+41], 0
	jne	SHORT $LN3@Lbound
	push	ebx
	npad	2
$LL4@Lbound:

; 1174 : 			if (_DEBUG_LT_PRED(this->comp, _Key(_Pnode), _Keyval))

	mov	ecx, DWORD PTR [esi+16]
	test	ecx, ecx
	je	SHORT $LN21@Lbound
	mov	edx, DWORD PTR [edi]
	npad	7
$LL29@Lbound:
	mov	bl, BYTE PTR [ecx]
	cmp	bl, BYTE PTR [edx]
	jne	SHORT $LN30@Lbound
	test	bl, bl
	je	SHORT $LN31@Lbound
	mov	bl, BYTE PTR [ecx+1]
	cmp	bl, BYTE PTR [edx+1]
	jne	SHORT $LN30@Lbound
	add	ecx, 2
	add	edx, 2
	test	bl, bl
	jne	SHORT $LL29@Lbound
$LN31@Lbound:
	xor	ecx, ecx
	test	ecx, ecx
	jmp	SHORT $LN34@Lbound
$LN30@Lbound:
	sbb	ecx, ecx
	sbb	ecx, -1
	test	ecx, ecx
	jmp	SHORT $LN34@Lbound
$LN21@Lbound:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, DWORD PTR [edi+4]
$LN34@Lbound:
	setl	cl
	test	cl, cl
	je	SHORT $LN2@Lbound

; 1175 : 				_Pnode = _Right(_Pnode);	// descend right subtree

	mov	esi, DWORD PTR [esi+8]

; 1176 : 			else

	jmp	SHORT $LN1@Lbound
$LN2@Lbound:

; 1177 : 				{	// _Pnode not less than _Keyval, remember it
; 1178 : 				_Wherenode = _Pnode;

	mov	eax, esi

; 1179 : 				_Pnode = _Left(_Pnode);	// descend left subtree

	mov	esi, DWORD PTR [esi]
$LN1@Lbound:

; 1171 : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 1172 : 
; 1173 : 		while (!_Isnil(_Pnode))

	cmp	BYTE PTR [esi+41], 0
	je	SHORT $LL4@Lbound
	pop	ebx
$LN3@Lbound:
	pop	esi

; 1180 : 				}
; 1181 : 
; 1182 : 		return (_Wherenode);	// return best remembered candidate
; 1183 : 		}

	ret	0
?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Init, COMDAT
; _this$ = esi

; 1084 : 		_Myhead = _Buynode();

	call	?_Buynode@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode
	mov	DWORD PTR [esi+4], eax

; 1085 : 		_Isnil(_Myhead) = true;

	mov	BYTE PTR [eax+41], 1

; 1086 : 		_Root() = _Myhead;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], eax

; 1087 : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+8], eax

; 1088 : 		_Mysize = 0;

	mov	DWORD PTR [esi+8], 0

; 1089 : 		}

	ret	0
?_Init@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Init
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z$1
__ehfuncinfo$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T31763 = 8						; size = 4
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1072 : 		{	// free entire subtree, recursively

	push	-1
	push	__ehhandler$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+32]
	mov	DWORD PTR fs:0, eax
	mov	ebx, ecx

; 1073 : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

	mov	edi, DWORD PTR __Rootnode$[esp+28]
	cmp	BYTE PTR [edi+41], 0
	mov	esi, edi
	jne	SHORT $LN1@Erase
$LL3@Erase:

; 1074 : 			{	// free subtrees, then node
; 1075 : 			_Erase(_Right(_Pnode));

	mov	eax, DWORD PTR [esi+8]
	push	eax
	mov	ecx, ebx
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 1076 : 			_Pnode = _Left(_Pnode);

	mov	esi, DWORD PTR [esi]

; 1077 : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node

	lea	ebp, DWORD PTR [edi+16]
	mov	DWORD PTR $T31763[esp+28], ebp
	lea	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR __$EHRec$[esp+40], 0
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
	mov	ecx, ebp
	mov	DWORD PTR __$EHRec$[esp+40], -1
	call	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString

; 1078 : 			this->_Alnod.deallocate(_Rootnode, 1);

	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	cmp	BYTE PTR [esi+41], 0
	mov	edi, esi
	je	SHORT $LL3@Erase
$LN1@Erase:

; 1079 : 			}
; 1080 : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z$1:
	mov	ecx, DWORD PTR $T31763[ebp-4]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-16]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z
_TEXT	SEGMENT
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = esi

; 496  : 		_Init();

	call	?_Buynode@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode
	mov	DWORD PTR [esi+4], eax
	mov	BYTE PTR [eax+41], 1
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [esi+8], 0

; 497  : 		}

	mov	eax, esi
	ret	0
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@ABV?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
??9const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NABV012@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = edi
; __Right$ = esi

; 305  : 			return (!(*this == _Right));

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN3@operator@21
	cmp	eax, DWORD PTR [esi]
	je	SHORT $LN4@operator@21
$LN3@operator@21:
	call	__invalid_parameter_noinfo
$LN4@operator@21:
	mov	eax, DWORD PTR [edi+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+4]
	setne	cl
	mov	al, cl

; 306  : 			}

	ret	0
??9const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear, COMDAT
; _this$ = eax

; 948  : 		{	// erase all

	push	esi
	mov	esi, eax

; 949  : 
; 950  :  #if _HAS_ITERATOR_DEBUGGING
; 951  : 		this->_Orphan_ptr(*this, 0);
; 952  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 953  : 
; 954  : 		_Erase(_Root());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, esi
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 955  : 		_Root() = _Myhead, _Mysize = 0;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], eax

; 956  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [eax], eax
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+8], esi
	pop	esi

; 957  : 		}

	ret	0
?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty, COMDAT
; _this$ = ecx

; 592  : 		return (size() == 0);

	xor	eax, eax
	cmp	DWORD PTR [ecx+8], eax
	sete	al

; 593  : 		}

	ret	0
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0DefaultValueAllocator@Json@@QAE@XZ
_TEXT	SEGMENT
??0DefaultValueAllocator@Json@@QAE@XZ PROC		; Json::DefaultValueAllocator::DefaultValueAllocator, COMDAT
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	mov	eax, OFFSET ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
	ret	0
??0DefaultValueAllocator@Json@@QAE@XZ ENDP		; Json::DefaultValueAllocator::DefaultValueAllocator
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
_TEXT	ENDS
;	COMDAT ??1DefaultValueAllocator@Json@@UAE@XZ
_TEXT	SEGMENT
??1DefaultValueAllocator@Json@@UAE@XZ PROC		; Json::DefaultValueAllocator::~DefaultValueAllocator, COMDAT
; _this$ = ecx

; 64   :    }

	mov	DWORD PTR [ecx], OFFSET ??_7ValueAllocator@Json@@6B@
	ret	0
??1DefaultValueAllocator@Json@@UAE@XZ ENDP		; Json::DefaultValueAllocator::~DefaultValueAllocator
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GValueAllocator@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GValueAllocator@Json@@UAEPAXI@Z PROC			; Json::ValueAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7ValueAllocator@Json@@6B@
	je	SHORT $LN6@scalar@3
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar@3:
	mov	eax, esi
	pop	esi
	ret	4
??_GValueAllocator@Json@@UAEPAXI@Z ENDP			; Json::ValueAllocator::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base@1@@Z
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base@1@@Z PROC ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = edi
; __Ptr$ = ebx
; __Pvector$ = esi

; 314  : 		{	// construct with pointer _Ptr

	test	esi, esi
	mov	DWORD PTR [edi], 0
	je	SHORT $LN3@Vector_ite
	cmp	DWORD PTR [esi+4], ebx
	ja	SHORT $LN3@Vector_ite
	cmp	ebx, DWORD PTR [esi+8]
	jbe	SHORT $LN4@Vector_ite
$LN3@Vector_ite:
	call	__invalid_parameter_noinfo
$LN4@Vector_ite:
	mov	DWORD PTR [edi], esi
	mov	DWORD PTR [edi+4], ebx

; 315  : 		}

	mov	eax, edi
	ret	0
??0?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base@1@@Z ENDP ; std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
??0const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PBV12@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = esi
; __Pnode$ = eax
; __Plist$ = edi

; 225  : 			_SCL_SECURE_VALIDATE(_Plist != NULL);

	test	edi, edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], eax
	jne	SHORT $LN8@const_iter
	call	__invalid_parameter_noinfo
$LN8@const_iter:

; 226  : 			this->_Mycont =_Plist;
; 227  : 			}

	mov	eax, esi
	mov	DWORD PTR [esi], edi
	ret	0
??0const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PBV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ
_TEXT	SEGMENT
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi

; 637  : 		{	// return iterator for end of mutable sequence

	push	ebx

; 638  : 		return (iterator(_Mylast, this));

	mov	ebx, DWORD PTR [edi+8]
	cmp	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [esi], 0
	jbe	SHORT $LN6@end@2
	call	__invalid_parameter_noinfo
$LN6@end@2:
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi], edi
	mov	eax, esi
	pop	ebx

; 639  : 		}

	ret	0
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ
_TEXT	SEGMENT
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi

; 627  : 		{	// return iterator for beginning of mutable sequence

	push	ebx

; 628  : 		return (iterator(_Myfirst, this));

	mov	ebx, DWORD PTR [edi+4]
	cmp	ebx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi], 0
	jbe	SHORT $LN6@begin@2
	call	__invalid_parameter_noinfo
$LN6@begin@2:
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi], edi
	mov	eax, esi
	pop	ebx

; 629  : 		}

	ret	0
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = esi

; 366  : 
; 367  :  #if _HAS_ITERATOR_DEBUGGING
; 368  : 			if (this->_Mycont == 0 || _Isnil(_Ptr))
; 369  : 				{
; 370  : 				_DEBUG_ERROR("map/set iterator not incrementable");
; 371  : 				_SCL_SECURE_OUT_OF_RANGE;
; 372  : 				}
; 373  :  #else
; 374  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN7@Inc
	call	__invalid_parameter_noinfo
$LN7@Inc:

; 375  : 			if (_Isnil(_Ptr))

	mov	eax, DWORD PTR [esi+4]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LN6@Inc

; 376  : 				{
; 377  : 				_SCL_SECURE_OUT_OF_RANGE;

	jmp	__invalid_parameter_noinfo
$LN6@Inc:

; 378  : 				// end() shouldn't be incremented, don't move if _SCL_SECURE is not turned on
; 379  : 				}
; 380  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 381  : 
; 382  : 			else if (!_Isnil(_Right(_Ptr)))

	mov	ecx, DWORD PTR [eax+8]
	cmp	BYTE PTR [ecx+41], 0
	jne	SHORT $LN35@Inc

; 383  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+41], 0
	jne	SHORT $LN18@Inc
	npad	7
$LL19@Inc:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LL19@Inc
$LN18@Inc:
	mov	DWORD PTR [esi+4], ecx

; 391  : 				}
; 392  : 			}

	ret	0
$LN35@Inc:

; 384  : 			else
; 385  : 				{	// climb looking for right subtree
; 386  : 				_Nodeptr _Pnode;
; 387  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 388  : 					&& _Ptr == _Right(_Pnode))

	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+41], 0
	jne	SHORT $LN1@Inc
$LL2@Inc:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@Inc

; 389  : 					_Ptr = _Pnode;	// ==> parent while right subtree

	mov	DWORD PTR [esi+4], eax
	mov	edx, eax
	mov	eax, DWORD PTR [edx+4]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LL2@Inc
$LN1@Inc:

; 390  : 				_Ptr = _Pnode;	// ==> parent (head if end())

	mov	DWORD PTR [esi+4], eax

; 391  : 				}
; 392  : 			}

	ret	0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = esi

; 310  : 
; 311  :  #if _HAS_ITERATOR_DEBUGGING
; 312  : 			if (this->_Mycont == 0)
; 313  : 				{
; 314  : 				_DEBUG_ERROR("map/set iterator not decrementable");
; 315  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 316  : 				}
; 317  :  #else
; 318  : 			_SCL_SECURE_VALIDATE(this->_Mycont != NULL);

	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN10@Dec
	call	__invalid_parameter_noinfo
$LN10@Dec:

; 319  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 320  : 
; 321  : 			if (_Isnil(_Ptr))

	mov	eax, DWORD PTR [esi+4]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LN9@Dec

; 322  : 			{
; 323  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+4], eax

; 324  :    				if (_Isnil(_Ptr))

	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LN1@Dec

; 325  : #if _HAS_ITERATOR_DEBUGGING
; 326  : 				{
; 327  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 328  : 					_SCL_SECURE_OUT_OF_RANGE;
; 329  : 				}
; 330  : #elif _SECURE_SCL
; 331  : 				{
; 332  :     				_SCL_SECURE_OUT_OF_RANGE;

	jmp	__invalid_parameter_noinfo
$LN9@Dec:

; 333  : 				}
; 334  : #else
; 335  : 				return;	// begin() shouldn't be incremented, don't move
; 336  : #endif
; 337  : 			}
; 338  : 			else if (!_Isnil(_Left(_Ptr)))

	mov	ecx, DWORD PTR [eax]
	cmp	BYTE PTR [ecx+41], 0
	jne	SHORT $LN44@Dec

; 339  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+41], 0
	jne	SHORT $LN25@Dec
$LL26@Dec:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LL26@Dec
$LN25@Dec:
	mov	DWORD PTR [esi+4], ecx

; 361  : 				}
; 362  : 			}

	ret	0
$LN44@Dec:

; 340  : 			else
; 341  : 				{	// climb looking for left subtree
; 342  : 				_Nodeptr _Pnode;
; 343  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 344  : 					&& _Ptr == _Left(_Pnode))

	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+41], 0
	jne	SHORT $LN3@Dec
	npad	3
$LL4@Dec:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@Dec

; 345  : 					_Ptr = _Pnode;	// ==> parent while left subtree

	mov	DWORD PTR [esi+4], eax
	mov	edx, eax
	mov	eax, DWORD PTR [edx+4]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LL4@Dec
$LN3@Dec:

; 346  : 				if (_Isnil(_Ptr))

	mov	ecx, DWORD PTR [esi+4]
	cmp	BYTE PTR [ecx+41], 0
	je	SHORT $LN2@Dec

; 347  :  #if _HAS_ITERATOR_DEBUGGING
; 348  :  					{
; 349  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 350  : 					_SCL_SECURE_OUT_OF_RANGE;
; 351  : 					}
; 352  :  #elif _SECURE_SCL
; 353  : 					{
; 354  : 					_SCL_SECURE_OUT_OF_RANGE;

	jmp	__invalid_parameter_noinfo
$LN2@Dec:

; 355  : 					}
; 356  :  #else
; 357  : 					return;	// begin() shouldn't be incremented, don't move
; 358  :  #endif
; 359  : 				else
; 360  : 					_Ptr = _Pnode;	// ==> parent if not head

	mov	DWORD PTR [esi+4], eax
$LN1@Dec:

; 361  : 				}
; 362  : 			}

	ret	0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Dec
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
??0iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PBV12@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::iterator, COMDAT
; _this$ = esi
; __Pnode$ = eax
; __Plist$ = edi

; 437  : 			{	// construct with node pointer _Pnode

	test	edi, edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], eax
	jne	SHORT $LN10@iterator
	call	__invalid_parameter_noinfo
$LN10@iterator:

; 438  : 			}

	mov	eax, esi
	mov	DWORD PTR [esi], edi
	ret	0
??0iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PBV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::iterator
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate, COMDAT
; __Wherenode$ = ecx

; 1236 : 		_Nodeptr _Pnode = _Left(_Wherenode);

	mov	eax, DWORD PTR [ecx]

; 1237 : 		_Left(_Wherenode) = _Right(_Pnode);

	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx], edx

; 1238 : 
; 1239 : 		if (!_Isnil(_Right(_Pnode)))

	mov	edx, DWORD PTR [eax+8]
	cmp	BYTE PTR [edx+41], 0
	jne	SHORT $LN5@Rrotate

; 1240 : 			_Parent(_Right(_Pnode)) = _Wherenode;

	mov	DWORD PTR [edx+4], ecx
$LN5@Rrotate:

; 1241 : 		_Parent(_Pnode) = _Parent(_Wherenode);

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 1242 : 
; 1243 : 		if (_Wherenode == _Root())

	mov	edx, DWORD PTR _this$[esp-4]
	mov	edx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [edx+4]
	jne	SHORT $LN4@Rrotate

; 1244 : 			_Root() = _Pnode;

	mov	DWORD PTR [edx+4], eax

; 1249 : 
; 1250 : 		_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax+8], ecx

; 1251 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [ecx+4], eax

; 1252 : 		}

	ret	4
$LN4@Rrotate:

; 1245 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

	mov	edx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [edx+8]
	jne	SHORT $LN2@Rrotate

; 1246 : 			_Right(_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [edx+8], eax

; 1249 : 
; 1250 : 		_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax+8], ecx

; 1251 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [ecx+4], eax

; 1252 : 		}

	ret	4
$LN2@Rrotate:

; 1247 : 		else
; 1248 : 			_Left(_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [edx], eax

; 1249 : 
; 1250 : 		_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax+8], ecx

; 1251 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [ecx+4], eax

; 1252 : 		}

	ret	4
?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator--, COMDAT
; _this$ = eax

; 275  : 			{	// predecrement

	push	esi
	mov	esi, eax

; 276  : 			_Dec();

	call	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Dec

; 277  : 			return (*this);

	mov	eax, esi
	pop	esi

; 278  : 			}

	ret	0
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator--
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator++, COMDAT
; _this$ = eax

; 262  : 			{	// preincrement

	push	esi
	mov	esi, eax

; 263  : 			_Inc();

	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Inc

; 264  : 			return (*this);

	mov	eax, esi
	pop	esi

; 265  : 			}

	ret	0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::operator++, COMDAT
; _this$ = eax

; 460  : 			{	// preincrement

	push	esi
	mov	esi, eax

; 461  : 			++(*(const_iterator *)this);

	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Inc

; 462  : 			return (*this);

	mov	eax, esi
	pop	esi

; 463  : 			}

	ret	0
??Eiterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound, COMDAT
; _this$ = ebx
; ___$ReturnUdt$ = esi
; __Keyval$ = edi

; 987  : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

	mov	eax, ebx
	call	?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
	test	ebx, ebx
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], eax
	jne	SHORT $LN12@lower_boun
	call	__invalid_parameter_noinfo
$LN12@lower_boun:
	mov	eax, esi
	mov	DWORD PTR [esi], ebx

; 988  : 		}

	ret	0
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 552  : 		return (_TREE_ITERATOR(_Myhead));

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax], ecx

; 553  : 		}

	ret	0
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = eax

; 542  : 		return (_TREE_ITERATOR(_Lmost()));

	mov	edx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax], ecx

; 543  : 		}

	ret	0
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
_TEXT	ENDS
PUBLIC	?size@Value@Json@@QBEIXZ			; Json::Value::size
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?size@Value@Json@@QBEIXZ
_TEXT	SEGMENT
_itLast$19012 = -12					; size = 8
?size@Value@Json@@QBEIXZ PROC				; Json::Value::size, COMDAT
; _this$ = eax

; 875  :    switch ( type_ )

	movsx	ecx, BYTE PTR [eax+8]
	sub	esp, 12					; 0000000cH
	cmp	ecx, 7
	push	esi
	push	edi
	ja	SHORT $LN1@size@2
	jmp	DWORD PTR $LN38@size@2[ecx*4]
$LN4@size@2:

; 876  :    {
; 877  :    case nullValue:
; 878  :    case intValue:
; 879  :    case uintValue:
; 880  :    case realValue:
; 881  :    case booleanValue:
; 882  :    case stringValue:
; 883  :       return 0;
; 884  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 885  :    case arrayValue:  // size of the array is highest index + 1
; 886  :       if ( !value_.map_->empty() )

	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@size@2

; 887  :       {
; 888  :          ObjectValues::const_iterator itLast = value_.map_->end();

	mov	ecx, DWORD PTR [eax+4]

; 889  :          --itLast;

	lea	esi, DWORD PTR _itLast$19012[esp+20]
	mov	DWORD PTR _itLast$19012[esp+20], eax
	mov	DWORD PTR _itLast$19012[esp+24], ecx
	call	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Dec

; 890  :          return (*itLast).first.index()+1;

	mov	esi, DWORD PTR _itLast$19012[esp+20]
	test	esi, esi
	jne	SHORT $LN28@size@2
	call	__invalid_parameter_noinfo
$LN28@size@2:
	mov	edi, DWORD PTR _itLast$19012[esp+24]
	cmp	edi, DWORD PTR [esi+4]
	jne	SHORT $LN27@size@2
	call	__invalid_parameter_noinfo
$LN27@size@2:
	mov	eax, DWORD PTR [edi+20]
	add	eax, 1

; 895  : #else
; 896  :    case arrayValue:
; 897  :       return Int( value_.array_->size() );
; 898  :    case objectValue:
; 899  :       return Int( value_.map_->size() );
; 900  : #endif
; 901  :    default:
; 902  :       JSON_ASSERT_UNREACHABLE;
; 903  :    }
; 904  :    return 0; // unreachable;
; 905  : }

	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	ret	0
$LN2@size@2:

; 891  :       }
; 892  :       return 0;
; 893  :    case objectValue:
; 894  :       return Int( value_.map_->size() );

	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]

; 895  : #else
; 896  :    case arrayValue:
; 897  :       return Int( value_.array_->size() );
; 898  :    case objectValue:
; 899  :       return Int( value_.map_->size() );
; 900  : #endif
; 901  :    default:
; 902  :       JSON_ASSERT_UNREACHABLE;
; 903  :    }
; 904  :    return 0; // unreachable;
; 905  : }

	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	ret	0
$LN1@size@2:
	pop	edi
	xor	eax, eax
	pop	esi
	add	esp, 12					; 0000000cH
	ret	0
	npad	1
$LN38@size@2:
	DD	$LN1@size@2
	DD	$LN1@size@2
	DD	$LN1@size@2
	DD	$LN1@size@2
	DD	$LN1@size@2
	DD	$LN1@size@2
	DD	$LN4@size@2
	DD	$LN2@size@2
?size@Value@Json@@QBEIXZ ENDP				; Json::Value::size
_TEXT	ENDS
;	COMDAT ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA
_BSS	SEGMENT
?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA DD 01H DUP (?) ; `Json::valueAllocator'::`2'::$S1
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ
_TEXT	SEGMENT
?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ PROC	; Json::valueAllocator, COMDAT

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, 1
	test	BYTE PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, al
	jne	SHORT $LN8@valueAlloc
	or	DWORD PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, eax
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	add	esp, 4
$LN8@valueAlloc:

; 101  :    static ValueAllocator *valueAllocator = &defaultAllocator;
; 102  :    return valueAllocator;

	mov	eax, OFFSET ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A

; 103  : }

	ret	0
?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ENDP	; Json::valueAllocator
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GDefaultValueAllocator@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GDefaultValueAllocator@Json@@UAEPAXI@Z PROC		; Json::DefaultValueAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7ValueAllocator@Json@@6B@
	je	SHORT $LN8@scalar@11
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN8@scalar@11:
	mov	eax, esi
	pop	esi
	ret	4
??_GDefaultValueAllocator@Json@@UAEPAXI@Z ENDP		; Json::DefaultValueAllocator::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = esi
	cmp	DWORD PTR [esi+24], 16			; 00000010H
	jb	SHORT $LN20@scalar@14
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN20@scalar@14:
	xor	eax, eax
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	BYTE PTR [esi+4], al
	mov	eax, esi
	ret	0
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __Ptr$ = esi

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);

	cmp	DWORD PTR [esi+24], 16			; 00000010H
	jb	SHORT $LN22@Destroy
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN22@Destroy:
	xor	eax, eax
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], eax
	mov	BYTE PTR [esi+4], al

; 61   : 	}

	ret	0
??$_Destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy, COMDAT
; __Ptr$ = esi

; 161  : 		_Destroy(_Ptr);

	cmp	DWORD PTR [esi+24], 16			; 00000010H
	jb	SHORT $LN24@destroy
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN24@destroy:
	xor	eax, eax
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], eax
	mov	BYTE PTR [esi+4], al

; 162  : 		}

	ret	0
?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = eax
; __Last$ = edi

; 233  : 	{	// destroy [_First, _Last), arbitrary type

	push	esi
	mov	esi, eax

; 234  : 	for (; _First != _Last; ++_First)

	cmp	esi, edi
	je	SHORT $LN1@Destroy_ra
	push	ebx
	xor	ebx, ebx
	npad	6
$LL3@Destroy_ra:

; 235  : 		_Al.destroy(_First);

	cmp	DWORD PTR [esi+24], 16			; 00000010H
	jb	SHORT $LN29@Destroy_ra
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN29@Destroy_ra:
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], ebx
	mov	BYTE PTR [esi+4], bl
	add	esi, 28					; 0000001cH
	cmp	esi, edi
	jne	SHORT $LL3@Destroy_ra
	pop	ebx
$LN1@Destroy_ra:
	pop	esi

; 236  : 	}

	ret	0
??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$35623 = -4					; size = 1
__First$ = 8						; size = 4
??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __Last$ = edi

; 225  : 	{	// destroy [_First, _Last)

	push	ecx

; 226  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Cat$35623[esp+4]
	push	eax
	mov	eax, DWORD PTR __First$[esp+4]
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 227  : 	}

	add	esp, 8
	ret	0
??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV012@H@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::operator++, COMDAT
; _this$ = eax
; ___$ReturnUdt$ = edi

; 466  : 			{	// postincrement

	push	esi
	mov	esi, eax

; 467  : 			iterator _Tmp = *this;

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], ecx

; 468  : 			++*this;

	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Inc

; 469  : 			return (_Tmp);

	mov	eax, edi
	pop	esi

; 470  : 			}

	ret	0
??Eiterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::iterator::operator++
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__Cat$35648 = 8						; size = 1
__First$ = 8						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; __Last$ = edi

; 1083 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR __Cat$35648[esp-4]
	push	eax
	mov	eax, DWORD PTR __First$[esp]
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	pop	ecx

; 1084 : 		}

	ret	4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Where$ = -16						; size = 8
$T35658 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find, COMDAT
; _this$ = ebx
; __Keyval$ = eax

; 960  : 		{	// find an element in mutable sequence that matches _Keyval

	sub	esp, 20					; 00000014H
	push	ebp
	push	esi
	push	edi
	mov	edi, eax

; 961  : 		iterator _Where = lower_bound(_Keyval);

	mov	eax, ebx
	call	?_Lbound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound
	test	ebx, ebx
	mov	esi, eax
	mov	DWORD PTR __Where$[esp+36], esi
	jne	SHORT $LN9@find
	call	__invalid_parameter_noinfo
$LN9@find:

; 962  : 		return (_Where == end()
; 963  : 			|| _DEBUG_LT_PRED(this->comp,
; 964  : 				_Keyval, _Key(_Where._Mynode()))
; 965  : 					? end() : _Where);

	mov	ebp, DWORD PTR [ebx+4]
	cmp	esi, ebp
	mov	DWORD PTR __Where$[esp+32], ebx
	je	SHORT $LN3@find
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN41@find
	mov	ecx, DWORD PTR [esi+16]
$LL55@find:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN56@find
	test	dl, dl
	je	SHORT $LN57@find
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN56@find
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL55@find
$LN57@find:
	xor	eax, eax
	test	eax, eax
	jmp	SHORT $LN59@find
$LN56@find:
	sbb	eax, eax
	sbb	eax, -1
	test	eax, eax
	jmp	SHORT $LN59@find
$LN41@find:
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [esi+20]
$LN59@find:
	setl	al
	test	al, al
	jne	SHORT $LN3@find
	lea	eax, DWORD PTR __Where$[esp+32]
	jmp	SHORT $LN4@find
$LN3@find:
	mov	DWORD PTR $T35658[esp+36], ebp
	mov	DWORD PTR $T35658[esp+32], ebx
	lea	eax, DWORD PTR $T35658[esp+32]
$LN4@find:
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+28]
	mov	eax, DWORD PTR [eax+4]

; 966  : 		}

	pop	edi
	pop	esi
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx], edx
	mov	eax, ecx
	pop	ebp
	add	esp, 20					; 00000014H
	ret	4
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
_TEXT	ENDS
;	COMDAT ??1CZString@Value@Json@@QAE@XZ
_TEXT	SEGMENT
??1CZString@Value@Json@@QAE@XZ PROC			; Json::Value::CZString::~CZString, COMDAT
; _this$ = ecx

; 197  : {

	push	esi
	mov	esi, ecx

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN1@CZString
	mov	eax, 1
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@CZString

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	test	BYTE PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, al
	jne	SHORT $LN4@CZString
	or	DWORD PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, eax
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	add	esp, 4
$LN4@CZString:
	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+8]
	push	edx
	call	eax
$LN1@CZString:
	pop	esi

; 200  : }

	ret	0
??1CZString@Value@Json@@QAE@XZ ENDP			; Json::Value::CZString::~CZString
_TEXT	ENDS
PUBLIC	??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z ; Json::Value::CZString::CZString
; Function compile flags: /Ogtpy
;	COMDAT ??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z
_TEXT	SEGMENT
_cstr$ = 8						; size = 4
??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z PROC ; Json::Value::CZString::CZString, COMDAT
; _this$ = esi

; 184  : {

	test	BYTE PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, 1
	jne	SHORT $LN9@CZString@2
	or	DWORD PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, 1
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	add	esp, 4
$LN9@CZString@2:
	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _cstr$[esp-4]
	mov	eax, DWORD PTR [eax+4]
	push	edx
	call	eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], 1

; 185  : }

	mov	eax, esi
	ret	4
??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z ENDP ; Json::Value::CZString::CZString
_TEXT	ENDS
PUBLIC	??1CommentInfo@Value@Json@@QAE@XZ		; Json::Value::CommentInfo::~CommentInfo
; Function compile flags: /Ogtpy
;	COMDAT ??1CommentInfo@Value@Json@@QAE@XZ
_TEXT	SEGMENT
??1CommentInfo@Value@Json@@QAE@XZ PROC			; Json::Value::CommentInfo::~CommentInfo, COMDAT
; _this$ = ecx

; 144  : {

	push	esi
	mov	esi, ecx

; 145  :    if ( comment_ )

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN1@CommentInf

; 146  :       valueAllocator()->releaseStringValue( comment_ );

	mov	eax, 1
	test	BYTE PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, al
	jne	SHORT $LN4@CommentInf
	or	DWORD PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, eax
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	add	esp, 4
$LN4@CommentInf:
	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+16]
	push	edx
	call	eax
$LN1@CommentInf:
	pop	esi

; 147  : }

	ret	0
??1CommentInfo@Value@Json@@QAE@XZ ENDP			; Json::Value::CommentInfo::~CommentInfo
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0DummyValueAllocatorInitializer@Json@@QAE@XZ
_TEXT	SEGMENT
??0DummyValueAllocatorInitializer@Json@@QAE@XZ PROC	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer, COMDAT

; 107  :    {
; 108  :       valueAllocator();      // ensure valueAllocator() statics are initialized before main().

	mov	eax, 1
	test	BYTE PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, al
	jne	SHORT $LN10@DummyValue
	or	DWORD PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, eax
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	add	esp, 4
$LN10@DummyValue:

; 109  :    }

	mov	eax, OFFSET _dummyValueAllocatorInitializer
	ret	0
??0DummyValueAllocatorInitializer@Json@@QAE@XZ ENDP	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\stdexcept
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 134  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 135  : 		}

	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	cmp	DWORD PTR [esi+36], 16			; 00000010H
	jb	SHORT $LN21@out_of_ran
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN21@out_of_ran:
	xor	eax, eax
	mov	DWORD PTR [esi+36], 15			; 0000000fH
	mov	DWORD PTR [esi+32], eax
	mov	BYTE PTR [esi+16], al
	mov	ecx, esi
	pop	esi
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xstring
;	COMDAT ?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap, COMDAT
; __Right$ = ecx

; 1662 : 		{	// exchange contents with _Right

	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+4], eax
	mov	eax, DWORD PTR _this$[esp]

; 1663 : 		if (_Mybase::_Alval == _Right._Alval)
; 1664 : 			{	// same allocator, swap control information
; 1665 : 
; 1666 :  #if _HAS_ITERATOR_DEBUGGING
; 1667 : 			this->_Swap_all(_Right);
; 1668 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1669 : 
; 1670 : 			_Bxty _Tbx = _Bx;

	mov	edx, DWORD PTR [eax+4]
	push	ebx
	mov	ebx, DWORD PTR [eax+16]
	push	ebp

; 1671 : 			_Bx = _Right._Bx, _Right._Bx = _Tbx;

	mov	ebp, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [eax+8]
	push	edi
	mov	edi, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	ebp, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ebp
	mov	DWORD PTR [ecx+4], edx
	mov	DWORD PTR [ecx+8], esi

; 1672 : 
; 1673 : 			size_type _Tlen = _Mysize;
; 1674 : 			_Mysize = _Right._Mysize, _Right._Mysize = _Tlen;

	mov	esi, DWORD PTR [ecx+20]
	mov	DWORD PTR [ecx+12], edi
	mov	DWORD PTR [ecx+16], ebx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [eax+20], esi

; 1675 : 
; 1676 : 			size_type _Tres = _Myres;
; 1677 : 			_Myres = _Right._Myres, _Right._Myres = _Tres;

	mov	esi, DWORD PTR [ecx+24]
	mov	DWORD PTR [ecx+20], edx
	mov	edx, DWORD PTR [eax+24]
	pop	edi
	mov	DWORD PTR [eax+24], esi
	pop	esi
	mov	DWORD PTR [ecx+24], edx

; 1678 : 			}
; 1679 : 		else
; 1680 : 			{	// different allocator, do multiple assigns
; 1681 : 			_Myt _Tmp = *this; *this = _Right, _Right = _Tmp;
; 1682 : 			}
; 1683 : 		}

	mov	ecx, DWORD PTR __$ArrayPad$[esp+12]
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	pop	ecx
	ret	4
?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$swap@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
??$swap@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::swap<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; __Left$ = eax
; __Right$ = ecx

; 2086 : 	_Left.swap(_Right);

	push	eax
	call	?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap

; 2087 : 	}

	ret	0
??$swap@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::swap<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z$0
__ehfuncinfo$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Vptr$ = -20						; size = 4
$T40292 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __Ptr$ = ecx

; 51   : 	{	// construct object at _Ptr with value _Val

	push	-1
	push	__ehhandler$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, eax

; 52   : 	void _FARQ *_Vptr = _Ptr;

	mov	DWORD PTR __Vptr$[esp+24], ecx

; 53   : 	::new (_Vptr) _T1(_Val);

	mov	DWORD PTR $T40292[esp+24], ecx
	xor	eax, eax
	cmp	ecx, eax
	mov	DWORD PTR __$EHRec$[esp+32], eax
	je	SHORT $LN3@Construct@2
	push	-1
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], 15			; 0000000fH
	push	eax
	mov	BYTE PTR [ecx+4], al
	mov	eax, DWORD PTR __Val$[esp+28]
	push	eax
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN3@Construct@2:

; 54   : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T40292[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-8]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Dest$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::forward_iterator_tag>, COMDAT
; __Last$ = ecx

; 2421 : 	{	// use swap instead of the copy constructor

	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+4], eax

; 2422 : 	_DEBUG_RANGE(_First, _Last);
; 2423 : 	while (_First != _Last)

	cmp	DWORD PTR __First$[esp], ecx
	mov	eax, DWORD PTR __Dest$[esp]
	je	SHORT $LN1@Move_backw
	push	ebx
	push	ebp
	push	esi
	push	edi
	npad	7
$LL2@Move_backw:

; 2424 : 		_STD swap(*--_Dest, *--_Last);

	mov	ebp, DWORD PTR [ecx-24]
	mov	edx, DWORD PTR [eax-24]
	mov	esi, DWORD PTR [eax-20]
	mov	edi, DWORD PTR [eax-16]
	mov	ebx, DWORD PTR [eax-12]
	sub	ecx, 28					; 0000001cH
	sub	eax, 28					; 0000001cH
	cmp	ecx, DWORD PTR __First$[esp+16]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	ebp, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ebp
	mov	DWORD PTR [ecx+4], edx
	mov	DWORD PTR [ecx+8], esi
	mov	esi, DWORD PTR [ecx+20]
	mov	DWORD PTR [ecx+12], edi
	mov	DWORD PTR [ecx+16], ebx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [eax+20], esi
	mov	esi, DWORD PTR [ecx+24]
	mov	DWORD PTR [ecx+20], edx
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [eax+24], esi
	mov	DWORD PTR [ecx+24], edx
	jne	SHORT $LL2@Move_backw
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$LN1@Move_backw:

; 2425 : 	return (_Dest);
; 2426 : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[esp+4]
	xor	ecx, esp
	call	@__security_check_cookie@4
	pop	ecx
	ret	0
??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z
_TEXT	SEGMENT
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct, COMDAT
; __Ptr$ = ecx
; __Val$ = eax

; 156  : 		_Construct(_Ptr, _Val);

	push	eax
	call	??$_Construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::_Construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
	pop	ecx

; 157  : 		}

	ret	0
?construct@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T40890 = -4						; size = 1
$T40891 = -4						; size = 1
___formal$ = 8						; size = 1
__Move_cat$ = 12					; size = 1
___formal$ = 16						; size = 1
??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __First$ = ebx
; __Last$ = eax
; __Dest$ = edi

; 2433 : 	{	// use swap to instead of the copy constructor

	push	ecx

; 2434 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2435 : 	_BidIt2 _Result = _Dest - (_Last - _First);
; 2436 : 	_Move_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2437 : 		forward_iterator_tag(), _Move_cat, _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Move_cat$[esp]
	push	esi
	mov	esi, eax
	mov	BYTE PTR $T40890[esp+8], 0
	mov	eax, DWORD PTR $T40890[esp+8]
	mov	edx, DWORD PTR $T40891[esp+8]
	push	eax
	push	ecx
	push	edx
	push	edi
	push	ebx
	mov	ecx, esi
	call	??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::forward_iterator_tag>
	sub	esi, ebx
	mov	eax, -1840700269			; 92492493H
	imul	esi
	add	edx, esi
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	add	ecx, ecx
	add	esp, 20					; 00000014H
	add	ecx, ecx
	mov	eax, edi
	sub	eax, ecx
	pop	esi

; 2438 : 	return _Result;
; 2439 : 	}

	pop	ecx
	ret	0
??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Urandom_access_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Fill@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0ABV10@@Z
_TEXT	SEGMENT
??$_Fill@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0ABV10@@Z PROC ; std::_Fill<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __First$ = eax
; __Last$ = edi
; __Val$ = ebx

; 2723 : 	{	// copy _Val through [_First, _Last)

	push	esi
	mov	esi, eax

; 2724 : 	_DEBUG_RANGE(_First, _Last);
; 2725 : 	for (; _First != _Last; ++_First)

	cmp	esi, edi
	je	SHORT $LN1@Fill
$LL3@Fill:

; 2726 : 		*_First = _Val;

	push	-1
	push	0
	push	ebx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	add	esi, 28					; 0000001cH
	cmp	esi, edi
	jne	SHORT $LL3@Fill
$LN1@Fill:
	pop	esi

; 2727 : 	}

	ret	0
??$_Fill@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0ABV10@@Z ENDP ; std::_Fill<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__catchsym$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T41149 = -28						; size = 4
__Vptr$41146 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Val$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __Count$ = ecx

; 302  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	edi, ecx
	mov	esi, DWORD PTR __First$[ebp]

; 303  : 
; 304  :  #if _HAS_ITERATOR_DEBUGGING
; 305  : //	if (_Count < 0)
; 306  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 307  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 308  : 
; 309  : 	_FwdIt _Next = _First;
; 310  : 
; 311  : 	_TRY_BEGIN

	xor	ebx, ebx
	mov	DWORD PTR __Next$[ebp], esi
	mov	DWORD PTR __$EHRec$[ebp+12], ebx
$LL6@Uninit_fil:

; 312  : 	for (; 0 < _Count; --_Count, ++_First)

	cmp	edi, ebx
	jbe	SHORT $LN4@Uninit_fil

; 313  : 		_Al.construct(_First, _Val);

	mov	DWORD PTR __Vptr$41146[ebp], esi
	mov	DWORD PTR $T41149[ebp], esi
	cmp	esi, ebx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	je	SHORT $LN18@Uninit_fil
	mov	eax, DWORD PTR __Val$[ebp]
	push	-1
	push	ebx
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], ebx
	push	eax
	mov	ecx, esi
	mov	BYTE PTR [esi+4], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN18@Uninit_fil:
	sub	edi, 1
	add	esi, 28					; 0000001cH
	mov	BYTE PTR __$EHRec$[ebp+12], bl
	mov	DWORD PTR __First$[ebp], esi
	jmp	SHORT $LL6@Uninit_fil
__catch$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 314  : 	_CATCH_ALL
; 315  : 	for (; _Next != _First; ++_Next)

	mov	esi, DWORD PTR __Next$[ebp]
	mov	edi, DWORD PTR __First$[ebp]
	cmp	esi, edi
	je	SHORT $LN1@Uninit_fil
	npad	3
$LL3@Uninit_fil:

; 316  : 		_Al.destroy(_Next);

	call	?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
	add	esi, 28					; 0000001cH
	cmp	esi, edi
	jne	SHORT $LL3@Uninit_fil
$LN1@Uninit_fil:

; 317  : 	_RERAISE;

	xor	ebx, ebx
	push	ebx
	push	ebx
	call	__CxxThrowException@8
$LN60@Uninit_fil:
$LN4@Uninit_fil:

; 318  : 	_CATCH_END
; 319  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN59@Uninit_fil:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$41146[ebp]
	push	eax
	mov	ecx, DWORD PTR $T41149[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Unchecked_move_backward@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@00@Z
_TEXT	SEGMENT
$T41215 = -4						; size = 1
__Cat$41177 = -4					; size = 1
$T41216 = -4						; size = 1
??$_Unchecked_move_backward@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@00@Z PROC ; stdext::_Unchecked_move_backward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __First$ = ebx
; __Last$ = eax
; __Dest$ = edi

; 3022 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ecx
	push	esi
	mov	esi, eax

; 3023 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3024 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	BYTE PTR $T41215[esp+8], 0
	mov	eax, DWORD PTR $T41215[esp+8]
	mov	ecx, DWORD PTR __Cat$41177[esp+8]
	mov	edx, DWORD PTR $T41216[esp+8]
	push	eax
	push	ecx
	push	edx
	push	edi
	push	ebx
	mov	ecx, esi
	call	??$_Move_backward_opt@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@Uforward_iterator_tag@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00Uforward_iterator_tag@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::forward_iterator_tag>
	sub	esi, ebx
	mov	eax, -1840700269			; 92492493H
	imul	esi
	add	edx, esi
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	add	ecx, ecx
	add	esp, 20					; 00000014H
	add	ecx, ecx
	mov	eax, edi
	sub	eax, ecx
	pop	esi

; 3025 : 	}

	pop	ecx
	ret	0
??$_Unchecked_move_backward@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@00@Z ENDP ; stdext::_Unchecked_move_backward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$fill@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0ABV10@@Z
_TEXT	SEGMENT
??$fill@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0ABV10@@Z PROC ; std::fill<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __First$ = eax
; __Last$ = edi
; __Val$ = ebx

; 2753 : 	{	// copy _Val through [_First, _Last)

	push	esi
	mov	esi, eax

; 2754 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	cmp	esi, edi
	je	SHORT $LN11@fill
$LL13@fill:
	push	-1
	push	0
	push	ebx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	add	esi, 28					; 0000001cH
	cmp	esi, edi
	jne	SHORT $LL13@fill
$LN11@fill:
	pop	esi

; 2755 : 	}

	ret	0
??$fill@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0ABV10@@Z ENDP ; std::fill<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
$T41273 = -4						; size = 1
__Cat$41278 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
??$unchecked_uninitialized_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __Val$ = edx

; 729  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ecx

; 730  : 		_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 731  : 			_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	BYTE PTR $T41273[esp+4], 0
	mov	eax, DWORD PTR $T41273[esp+4]
	mov	ecx, DWORD PTR __Cat$41278[esp+4]
	push	eax
	mov	eax, DWORD PTR __First$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Count$[esp+8]
	push	edx
	push	eax
	call	??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 732  : 	}

	add	esp, 20					; 00000014H
	ret	0
??$unchecked_uninitialized_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IABV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@IABV32@@Z
_TEXT	SEGMENT
$T41290 = -4						; size = 1
__Cat$41294 = -4					; size = 1
?_Ufill@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@IABV32@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ufill, COMDAT
; __Ptr$ = edi
; __Count$ = esi
; __Val$ = edx

; 1207 : 		{	// copy initializing _Count * _Val, using allocator

	push	ecx

; 1208 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	BYTE PTR $T41290[esp+4], 0
	mov	eax, DWORD PTR $T41290[esp+4]
	mov	ecx, DWORD PTR __Cat$41294[esp+4]
	push	eax
	push	ecx
	push	edx
	push	edi
	mov	ecx, esi
	call	??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1209 : 		return (_Ptr + _Count);

	lea	eax, DWORD PTR [esi*8]
	sub	eax, esi
	lea	eax, DWORD PTR [edi+eax*4]

; 1210 : 		}

	add	esp, 20					; 00000014H
	ret	0
?_Ufill@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@IABV32@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ufill
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
__Cat$41320 = -4					; size = 1
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = esi

; 1087 : 		{	// free all storage

	push	ecx

; 1088 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN10@Tidy@4

; 1089 : 			{	// something to free, destroy and deallocate it
; 1090 : 
; 1091 :  #if _HAS_ITERATOR_DEBUGGING
; 1092 : 			this->_Orphan_all();
; 1093 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1094 : 
; 1095 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR __Cat$41320[esp+4]
	push	edi
	mov	edi, DWORD PTR [esi+8]
	push	ecx
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1096 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR [esi+4]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 8
	pop	edi
$LN10@Tidy@4:

; 1097 : 			}
; 1098 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0

; 1099 : 		}

	pop	ecx
	ret	0
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
__Cat$41370 = -4					; size = 1
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = esi

; 545  : 		{	// destroy the object

	push	ecx

; 546  : 		_Tidy();

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN12@vector
	mov	ecx, DWORD PTR __Cat$41370[esp+4]
	push	edi
	mov	edi, DWORD PTR [esi+8]
	push	ecx
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	mov	edx, DWORD PTR [esi+4]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 8
	pop	edi
$LN12@vector:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0

; 547  : 		}

	pop	ecx
	ret	0
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??AValue@Json@@QBEABV01@PBD@Z			; Json::Value::operator[]
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??AValue@Json@@QBEABV01@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QBEABV01@PBD@Z$0
__ehfuncinfo$??AValue@Json@@QBEABV01@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??AValue@Json@@QBEABV01@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
xdata$x	ENDS
;	COMDAT ??AValue@Json@@QBEABV01@PBD@Z
_TEXT	SEGMENT
_actualKey$ = -32					; size = 8
$T41380 = -24						; size = 8
__$EHRec$ = -12						; size = 12
_key$ = 8						; size = 4
??AValue@Json@@QBEABV01@PBD@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1064 : {

	push	-1
	push	__ehhandler$??AValue@Json@@QBEABV01@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+56]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx

; 1065 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1066 :    if ( type_ == nullValue )

	cmp	BYTE PTR [edi+8], 0

; 1067 :       return null;

	je	SHORT $LN39@operator@24

; 1068 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1069 :    CZString actualKey( key, CZString::noDuplication );

	mov	eax, DWORD PTR _key$[esp+52]
	mov	DWORD PTR _actualKey$[esp+56], eax
	mov	DWORD PTR _actualKey$[esp+60], 0

; 1070 :    ObjectValues::const_iterator it = value_.map_->find( actualKey );

	mov	ebx, DWORD PTR [edi]
	lea	ecx, DWORD PTR $T41380[esp+56]
	push	ecx
	lea	eax, DWORD PTR _actualKey$[esp+60]
	call	?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
	mov	esi, DWORD PTR [eax]

; 1071 :    if ( it == value_.map_->end() )

	test	esi, esi
	mov	edi, DWORD PTR [edi]
	mov	ebx, DWORD PTR [eax+4]
	mov	ebp, DWORD PTR [edi+4]
	je	SHORT $LN28@operator@24
	cmp	esi, edi
	je	SHORT $LN29@operator@24
$LN28@operator@24:
	call	__invalid_parameter_noinfo
$LN29@operator@24:
	cmp	ebx, ebp
	jne	SHORT $LN1@operator@24

; 1072 :       return null;

	lea	ecx, DWORD PTR _actualKey$[esp+56]
	mov	DWORD PTR __$EHRec$[esp+64], -1
	call	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
$LN39@operator@24:
	mov	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	jmp	SHORT $LN3@operator@24
$LN1@operator@24:

; 1073 :    return (*it).second;

	test	esi, esi
	jne	SHORT $LN33@operator@24
	call	__invalid_parameter_noinfo
$LN33@operator@24:
	cmp	ebx, DWORD PTR [esi+4]
	jne	SHORT $LN32@operator@24
	call	__invalid_parameter_noinfo
$LN32@operator@24:
	lea	ecx, DWORD PTR _actualKey$[esp+56]
	lea	esi, DWORD PTR [ebx+24]
	mov	DWORD PTR __$EHRec$[esp+64], -1
	call	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
	mov	eax, esi
$LN3@operator@24:

; 1074 : #else
; 1075 :    const Value *value = value_.map_->find( key );
; 1076 :    return value ? *value : null;
; 1077 : #endif
; 1078 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+56]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 36					; 00000024H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??AValue@Json@@QBEABV01@PBD@Z$0:
	lea	ecx, DWORD PTR _actualKey$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??AValue@Json@@QBEABV01@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-40]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??AValue@Json@@QBEABV01@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??AValue@Json@@QBEABV01@PBD@Z ENDP			; Json::Value::operator[]
PUBLIC	??AValue@Json@@QBEABV01@I@Z			; Json::Value::operator[]
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??AValue@Json@@QBEABV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QBEABV01@I@Z$0
__ehfuncinfo$??AValue@Json@@QBEABV01@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??AValue@Json@@QBEABV01@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
xdata$x	ENDS
;	COMDAT ??AValue@Json@@QBEABV01@I@Z
_TEXT	SEGMENT
_key$ = -32						; size = 8
$T41484 = -24						; size = 8
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
??AValue@Json@@QBEABV01@I@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 997  : {

	push	-1
	push	__ehhandler$??AValue@Json@@QBEABV01@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+56]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx

; 998  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );
; 999  :    if ( type_ == nullValue )

	cmp	BYTE PTR [edi+8], 0

; 1000 :       return null;

	je	SHORT $LN30@operator@25

; 1001 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1002 :    CZString key( index );

	mov	eax, DWORD PTR _index$[esp+52]
	mov	DWORD PTR _key$[esp+56], 0
	mov	DWORD PTR _key$[esp+60], eax

; 1003 :    ObjectValues::const_iterator it = value_.map_->find( key );

	mov	ebx, DWORD PTR [edi]
	lea	ecx, DWORD PTR $T41484[esp+56]
	push	ecx
	lea	eax, DWORD PTR _key$[esp+60]
	call	?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
	mov	esi, DWORD PTR [eax]

; 1004 :    if ( it == value_.map_->end() )

	test	esi, esi
	mov	edi, DWORD PTR [edi]
	mov	ebx, DWORD PTR [eax+4]
	mov	ebp, DWORD PTR [edi+4]
	je	SHORT $LN19@operator@25
	cmp	esi, edi
	je	SHORT $LN20@operator@25
$LN19@operator@25:
	call	__invalid_parameter_noinfo
$LN20@operator@25:
	cmp	ebx, ebp
	jne	SHORT $LN1@operator@25

; 1005 :       return null;

	lea	ecx, DWORD PTR _key$[esp+56]
	mov	DWORD PTR __$EHRec$[esp+64], -1
	call	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
$LN30@operator@25:
	mov	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	jmp	SHORT $LN3@operator@25
$LN1@operator@25:

; 1006 :    return (*it).second;

	test	esi, esi
	jne	SHORT $LN24@operator@25
	call	__invalid_parameter_noinfo
$LN24@operator@25:
	cmp	ebx, DWORD PTR [esi+4]
	jne	SHORT $LN23@operator@25
	call	__invalid_parameter_noinfo
$LN23@operator@25:
	lea	ecx, DWORD PTR _key$[esp+56]
	lea	esi, DWORD PTR [ebx+24]
	mov	DWORD PTR __$EHRec$[esp+64], -1
	call	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
	mov	eax, esi
$LN3@operator@25:

; 1007 : #else
; 1008 :    Value *value = value_.array_->find( index );
; 1009 :    return value ? *value : null;
; 1010 : #endif
; 1011 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+56]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 36					; 00000024H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??AValue@Json@@QBEABV01@I@Z$0:
	lea	ecx, DWORD PTR _key$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??AValue@Json@@QBEABV01@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-40]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??AValue@Json@@QBEABV01@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??AValue@Json@@QBEABV01@I@Z ENDP			; Json::Value::operator[]
PUBLIC	??_ECommentInfo@Value@Json@@QAEPAXI@Z		; Json::Value::CommentInfo::`vector deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_ECommentInfo@Value@Json@@QAEPAXI@Z
_TEXT	SEGMENT
??_ECommentInfo@Value@Json@@QAEPAXI@Z PROC		; Json::Value::CommentInfo::`vector deleting destructor', COMDAT
; _this$ = eax
	mov	ecx, DWORD PTR [eax-4]
	push	esi
	lea	esi, DWORD PTR [eax-4]
	push	OFFSET ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
	push	ecx
	push	4
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, esi
	pop	esi
	ret	0
??_ECommentInfo@Value@Json@@QAEPAXI@Z ENDP		; Json::Value::CommentInfo::`vector deleting destructor'
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\include\json\writer.h
_TEXT	ENDS
;	COMDAT ??1StyledWriter@Json@@UAE@XZ
_TEXT	SEGMENT
__Cat$41870 = -4					; size = 1
??1StyledWriter@Json@@UAE@XZ PROC			; Json::StyledWriter::~StyledWriter, COMDAT
; _this$ = ecx

; 69   :       virtual ~StyledWriter(){}

	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7StyledWriter@Json@@6B@
	cmp	DWORD PTR [esi+72], 16			; 00000010H
	push	edi
	jb	SHORT $LN19@StyledWrit
	mov	eax, DWORD PTR [esi+52]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN19@StyledWrit:
	xor	ebx, ebx
	mov	edi, 15					; 0000000fH
	mov	DWORD PTR [esi+72], edi
	mov	DWORD PTR [esi+68], ebx
	mov	BYTE PTR [esi+52], bl
	cmp	DWORD PTR [esi+44], 16			; 00000010H
	jb	SHORT $LN45@StyledWrit
	mov	ecx, DWORD PTR [esi+24]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN45@StyledWrit:
	mov	DWORD PTR [esi+44], edi
	mov	DWORD PTR [esi+40], ebx
	mov	BYTE PTR [esi+24], bl
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, ebx
	je	SHORT $LN66@StyledWrit
	mov	edx, DWORD PTR __Cat$41870[esp+16]
	mov	edi, DWORD PTR [esi+12]
	push	edx
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 8
$LN66@StyledWrit:
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], ebx
	pop	edi
	mov	DWORD PTR [esi], OFFSET ??_7Writer@Json@@6B@
	pop	esi
	pop	ebx
	pop	ecx
	ret	0
??1StyledWriter@Json@@UAE@XZ ENDP			; Json::StyledWriter::~StyledWriter
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	cmp	DWORD PTR [esi+36], 16			; 00000010H
	jb	SHORT $LN24@scalar@21
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN24@scalar@21:
	xor	eax, eax
	mov	DWORD PTR [esi+36], 15			; 0000000fH
	mov	DWORD PTR [esi+32], eax
	mov	ecx, esi
	mov	BYTE PTR [esi+16], al
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN34@scalar@21
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN34@scalar@21:
	mov	eax, esi
	pop	esi
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\stdexcept
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 130  : 		{	// construct from message string

	mov	eax, DWORD PTR __Message$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR [esi], OFFSET ??_7out_of_range@std@@6B@

; 131  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
PUBLIC	__Dest$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$3
	DD	01H
	DD	00H
	DD	00H
	DD	00H
__catchsym$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 01H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$5
__ehfuncinfo$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T44931 = -80						; size = 4
__Vptr$44928 = -76					; size = 4
__Next$ = -72						; size = 4
__Dest$GSCopy$ = -68					; size = 4
__Tbx$45400 = -64					; size = 16
__Val$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Last$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx
; __Dest$ = edx

; 167  : 	{	// use swap to instead of the copy constructor

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, edx

; 168  : 	_DEBUG_RANGE(_First, _Last);
; 169  : 	_DEBUG_POINTER(_Dest);
; 170  : 	_FwdIt _Next = _Dest;
; 171  : 	// empty value used in the construction
; 172  : 	typename _Alloc::value_type _Val;

	xor	eax, eax
	mov	edi, ecx
	mov	DWORD PTR __Dest$GSCopy$[ebp], esi
	mov	DWORD PTR __Next$[ebp], esi
	mov	DWORD PTR __Val$[ebp+24], 15		; 0000000fH
	mov	DWORD PTR __Val$[ebp+20], eax
	mov	BYTE PTR __Val$[ebp+4], al
	mov	DWORD PTR __$EHRec$[ebp+12], eax

; 173  : 
; 174  : 	_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1
	npad	2
$LL6@Uninit_mov:

; 175  : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	edi, DWORD PTR __Last$[ebp]
	je	$LN4@Uninit_mov

; 176  : 		{
; 177  : 		_Al.construct(_Dest, _Val);

	mov	DWORD PTR __Vptr$44928[ebp], esi
	mov	DWORD PTR $T44931[ebp], esi
	cmp	esi, eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	je	SHORT $LN51@Uninit_mov
	push	-1
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	push	eax
	mov	BYTE PTR [esi+4], al
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN51@Uninit_mov:
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 178  : 		_STD swap(*_Dest, *_First);

	mov	ebx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR __Tbx$45400[ebp+12], ebx
	mov	ebx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], ebx
	mov	ebx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], ebx
	mov	ebx, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], ebx
	mov	ebx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], ebx
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], ecx
	mov	ecx, DWORD PTR __Tbx$45400[ebp+12]
	mov	DWORD PTR [edi+12], edx
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [edi+16], ecx
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+20], edx
	mov	ecx, DWORD PTR [edi+24]
	mov	DWORD PTR [edi+20], eax
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+24], ecx
	mov	DWORD PTR [edi+24], eax
	add	esi, 28					; 0000001cH
	add	edi, 28					; 0000001cH
	mov	DWORD PTR __Dest$GSCopy$[ebp], esi
	xor	eax, eax
	jmp	$LL6@Uninit_mov
__catch$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 179  : 		}
; 180  : 	_CATCH_ALL
; 181  : 	for (; _Next != _Dest; ++_Next)

	mov	esi, DWORD PTR __Next$[ebp]
	mov	edi, DWORD PTR __Dest$GSCopy$[ebp]
	cmp	esi, edi
	je	SHORT $LN1@Uninit_mov
	npad	2
$LL3@Uninit_mov:

; 182  : 		_Al.destroy(_Next);

	call	?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
	add	esi, 28					; 0000001cH
	cmp	esi, edi
	jne	SHORT $LL3@Uninit_mov
$LN1@Uninit_mov:

; 183  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN194@Uninit_mov:
$LN4@Uninit_mov:

; 184  : 	_CATCH_END
; 185  : 	return (_Dest);

	cmp	DWORD PTR __Val$[ebp+24], 16		; 00000010H
	jb	SHORT $LN179@Uninit_mov
	mov	edx, DWORD PTR __Val$[ebp+4]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN179@Uninit_mov:
	mov	eax, esi

; 186  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN193@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	lea	ecx, DWORD PTR __Val$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z$3:
	mov	eax, DWORD PTR __Vptr$44928[ebp]
	push	eax
	mov	ecx, DWORD PTR $T44931[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__catchsym$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T45734 = -28						; size = 4
__Vptr$45777 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Last$ = 8						; size = 4
__Dest$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx

; 102  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, DWORD PTR __Dest$[ebp]
	mov	edi, ecx

; 103  : 	_DEBUG_RANGE(_First, _Last);
; 104  : 	_DEBUG_POINTER(_Dest);
; 105  : 	_FwdIt _Next = _Dest;
; 106  : 
; 107  : 	_TRY_BEGIN

	xor	ebx, ebx
	mov	DWORD PTR __Next$[ebp], esi
	mov	DWORD PTR __$EHRec$[ebp+12], ebx
$LL6@Uninit_cop:

; 108  : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	edi, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 109  : 		_Al.construct(_Dest, *_First);

	mov	DWORD PTR __Vptr$45777[ebp], esi
	mov	DWORD PTR $T45734[ebp], esi
	cmp	esi, ebx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	je	SHORT $LN18@Uninit_cop
	push	-1
	push	ebx
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], ebx
	push	edi
	mov	ecx, esi
	mov	BYTE PTR [esi+4], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN18@Uninit_cop:
	add	esi, 28					; 0000001cH
	mov	BYTE PTR __$EHRec$[ebp+12], bl
	mov	DWORD PTR __Dest$[ebp], esi
	add	edi, 28					; 0000001cH
	jmp	SHORT $LL6@Uninit_cop
__catch$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 110  : 	_CATCH_ALL
; 111  : 	for (; _Next != _Dest; ++_Next)

	mov	esi, DWORD PTR __Next$[ebp]
	mov	edi, DWORD PTR __Dest$[ebp]
	cmp	esi, edi
	je	SHORT $LN1@Uninit_cop
	npad	5
$LL3@Uninit_cop:

; 112  : 		_Al.destroy(_Next);

	call	?destroy@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy
	add	esi, 28					; 0000001cH
	cmp	esi, edi
	jne	SHORT $LL3@Uninit_cop
$LN1@Uninit_cop:

; 113  : 	_RERAISE;

	xor	ebx, ebx
	push	ebx
	push	ebx
	call	__CxxThrowException@8
$LN60@Uninit_cop:
$LN4@Uninit_cop:

; 114  : 	_CATCH_END
; 115  : 	return (_Dest);

	mov	eax, esi

; 116  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN59@Uninit_cop:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$45777[ebp]
	push	eax
	mov	ecx, DWORD PTR $T45734[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
$T45793 = -4						; size = 1
__Cat$45797 = 8						; size = 1
__First$ = 8						; size = 4
__Dest$ = 12						; size = 4
??$_Unchecked_uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; stdext::_Unchecked_uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __Last$ = edx

; 692  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 693  : 		return (_STD _Uninit_move(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 694  : 			_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$45797[esp]
	mov	BYTE PTR $T45793[esp+4], 0
	mov	eax, DWORD PTR $T45793[esp+4]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+8]
	push	edx
	mov	edx, DWORD PTR __Dest$[esp+12]
	call	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 695  : 	}

	add	esp, 16					; 00000010H
	ret	0
??$_Unchecked_uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; stdext::_Unchecked_uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Unchecked_uninitialized_move@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0PAV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
$T45822 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$45826 = 16					; size = 1
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
??$_Unchecked_uninitialized_move@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0PAV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 692  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 693  : 		return (_STD _Uninit_move(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 694  : 			_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$45826[esp]
	mov	edx, DWORD PTR __Last$[esp+4]
	mov	BYTE PTR $T45822[esp+4], 0
	mov	eax, DWORD PTR $T45822[esp+4]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+12]
	push	edx
	mov	edx, DWORD PTR __Dest$[esp+12]
	call	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 695  : 	}

	add	esp, 16					; 00000010H
	ret	0
??$_Unchecked_uninitialized_move@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0PAV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0PAV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
$T45865 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$45869 = 16					; size = 1
__Last$ = 16						; size = 8
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0PAV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __Dest$ = edx

; 672  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 673  : 		return (_STD _Uninit_copy(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 674  : 			_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$45869[esp]
	mov	BYTE PTR $T45865[esp+4], 0
	mov	eax, DWORD PTR $T45865[esp+4]
	push	eax
	mov	eax, DWORD PTR __Last$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+12]
	push	edx
	push	eax
	call	??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 675  : 	}

	add	esp, 20					; 00000014H
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@0PAV12@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z
_TEXT	SEGMENT
$T45937 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$45940 = 12					; size = 1
__Ptr$ = 12						; size = 4
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __Last$ = edx

; 1109 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1110 : 		{	// move initializing [_First, _Last), using allocator
; 1111 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1112 : 			_Ptr, this->_Alval));

	mov	ecx, DWORD PTR __Cat$45940[esp]
	mov	BYTE PTR $T45937[esp+4], 0
	mov	eax, DWORD PTR $T45937[esp+4]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+8]
	push	edx
	mov	edx, DWORD PTR __Ptr$[esp+12]
	call	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1113 : 		}

	add	esp, 16					; 00000010H
	ret	8
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Umove@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@0PAV21@@Z
_TEXT	SEGMENT
$T46001 = -4						; size = 1
__Cat$46004 = 8						; size = 1
__Ptr$ = 8						; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
??$_Umove@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@0PAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 1109 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1110 : 		{	// move initializing [_First, _Last), using allocator
; 1111 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1112 : 			_Ptr, this->_Alval));

	mov	ecx, DWORD PTR __Cat$46004[esp]
	mov	edx, DWORD PTR __Last$[esp+4]
	mov	BYTE PTR $T46001[esp+4], 0
	mov	eax, DWORD PTR $T46001[esp+4]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+12]
	push	edx
	mov	edx, DWORD PTR __Ptr$[esp+12]
	call	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1113 : 		}

	add	esp, 16					; 00000010H
	ret	20					; 00000014H
??$_Umove@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@0PAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::_Vector_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@0PAV21@@Z
_TEXT	SEGMENT
$T46069 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$46072 = 16					; size = 1
__Last$ = 16						; size = 8
??$_Ucopy@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@0PAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; __Ptr$ = edx

; 1102 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1103 : 		{	// copy initializing [_First, _Last), using allocator
; 1104 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1105 : 			_Ptr, this->_Alval));

	mov	ecx, DWORD PTR __Cat$46072[esp]
	mov	BYTE PTR $T46069[esp+4], 0
	mov	eax, DWORD PTR $T46069[esp+4]
	push	eax
	mov	eax, DWORD PTR __Last$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+12]
	push	edx
	push	eax
	call	??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1106 : 		}

	add	esp, 20					; 00000014H
	ret	16					; 00000010H
??$_Ucopy@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_Vector_const_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@0PAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::_Vector_const_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::operator[], COMDAT
; _this$ = ecx
; _key$ = eax

; 1090 : {

	push	ecx

; 1091 :    return (*this)[ key.c_str() ];

	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN7@operator@26
	mov	eax, DWORD PTR [eax+4]
	push	eax
	call	??AValue@Json@@QBEABV01@PBD@Z		; Json::Value::operator[]
	pop	ecx

; 1092 : }

	ret	0

; 1091 :    return (*this)[ key.c_str() ];

$LN7@operator@26:
	add	eax, 4
	push	eax
	call	??AValue@Json@@QBEABV01@PBD@Z		; Json::Value::operator[]
	pop	ecx

; 1092 : }

	ret	0
??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GStyledWriter@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GStyledWriter@Json@@UAEPAXI@Z PROC			; Json::StyledWriter::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1StyledWriter@Json@@UAE@XZ		; Json::StyledWriter::~StyledWriter
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN4@scalar@24
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@24:
	mov	eax, esi
	pop	esi
	ret	4
??_GStyledWriter@Json@@UAEPAXI@Z ENDP			; Json::StyledWriter::`scalar deleting destructor'
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ
_TEXT	SEGMENT
$T50777 = -80						; size = 28
$T50776 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT

; 1213 : 		{	// report a length_error

	push	-1
	push	__ehhandler$?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+84]
	mov	DWORD PTR fs:0, eax

; 1214 : 		_THROW(length_error, "vector<T> too long");

	push	18					; 00000012H
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T50777[esp+92]
	mov	DWORD PTR $T50777[esp+116], 15		; 0000000fH
	mov	DWORD PTR $T50777[esp+112], 0
	mov	BYTE PTR $T50777[esp+96], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	lea	eax, DWORD PTR $T50777[esp+84]
	push	eax
	lea	ecx, DWORD PTR $T50776[esp+88]
	mov	DWORD PTR __$EHRec$[esp+96], 0
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T50776[esp+88]
	push	ecx
	mov	DWORD PTR $T50776[esp+92], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN45@Xlen:
$LN44@Xlen:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T50777[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-68]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
; Function compile flags: /Ogtpy
;	COMDAT ?_Buy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE_NI@Z
_TEXT	SEGMENT
?_Buy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE_NI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buy, COMDAT
; _this$ = edi
; __Capacity$ = esi

; 1066 : 		{	// allocate array with _Capacity elements

	push	ecx

; 1067 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 1068 : 		if (_Capacity == 0)
; 1069 : 			return (false);
; 1070 : 		else if (max_size() < _Capacity)

	cmp	esi, 153391689				; 09249249H
	jbe	SHORT $LN2@Buy

; 1071 : 			_Xlen();	// result too long

	jmp	?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
$LN2@Buy:

; 1072 : 		else
; 1073 : 			{	// nonempty array, allocate storage
; 1074 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	ecx, esi
	call	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate

; 1075 : 			_Mylast = _Myfirst;
; 1076 : 			_Myend = _Myfirst + _Capacity;

	lea	ecx, DWORD PTR [esi*8]
	sub	ecx, esi
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edi+12], edx

; 1077 : 			}
; 1078 : 		return (true);

	mov	al, 1
	pop	ecx

; 1079 : 		}

	ret	0
?_Buy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAE_NI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Buy
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$0
__tryblocktable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T51144 = -24						; size = 1
__Ptr$20605 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$51196 = 8						; size = 1
__Cat$51147 = 8						; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve, COMDAT
; _this$ = ecx

; 589  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx

; 590  : 		if (max_size() < _Count)

	mov	edi, DWORD PTR __Count$[ebp]
	cmp	edi, 153391689				; 09249249H
	jbe	SHORT $LN5@reserve@2

; 591  : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
$LN80@reserve@2:
$LN5@reserve@2:

; 592  : 		else if (capacity() < _Count)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN21@reserve@2
$LN20@reserve@2:
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, eax
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
$LN21@reserve@2:
	cmp	eax, edi
	jae	$LN3@reserve@2

; 593  : 			{	// not enough room, reallocate
; 594  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	ecx, edi
	call	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate

; 595  : 
; 596  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 597  : 			_Umove(begin(), end(), _Ptr);

	mov	ebx, DWORD PTR [esi+8]
	cmp	DWORD PTR [esi+4], ebx
	mov	DWORD PTR __Ptr$20605[ebp], eax
	jbe	SHORT $LN27@reserve@2
	call	__invalid_parameter_noinfo
$LN27@reserve@2:
	mov	edi, DWORD PTR [esi+4]
	cmp	edi, DWORD PTR [esi+8]
	jbe	SHORT $LN39@reserve@2
	call	__invalid_parameter_noinfo
$LN39@reserve@2:
	mov	ecx, DWORD PTR __Cat$51147[ebp]
	mov	edx, DWORD PTR __Ptr$20605[ebp]
	mov	BYTE PTR $T51144[ebp], 0
	mov	eax, DWORD PTR $T51144[ebp]
	push	eax
	push	ecx
	push	ebx
	mov	ecx, edi
	call	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 601  : 			_CATCH_END
; 602  : 
; 603  : 			size_type _Size = size();

	mov	ecx, DWORD PTR [esi+4]
	add	esp, 12					; 0000000cH
	test	ecx, ecx
	jne	SHORT $LN68@reserve@2
	xor	ebx, ebx
	jmp	SHORT $LN69@reserve@2
$LN68@reserve@2:
	mov	ebx, DWORD PTR [esi+8]
	sub	ebx, ecx
	mov	eax, -1840700269			; 92492493H
	imul	ebx
	add	edx, ebx
	sar	edx, 4
	mov	ebx, edx
	shr	ebx, 31					; 0000001fH
	add	ebx, edx
$LN69@reserve@2:

; 604  : 			if (_Myfirst != 0)

	test	ecx, ecx
	je	SHORT $LN76@reserve@2

; 605  : 				{	// destroy and deallocate old array
; 606  : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR __Cat$51196[ebp]
	mov	edi, DWORD PTR [esi+8]
	push	edx
	mov	eax, ecx
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 607  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR [esi+4]
	add	esp, 4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN76@reserve@2:

; 608  : 				}
; 609  : 
; 610  :  #if _HAS_ITERATOR_DEBUGGING
; 611  : 			this->_Orphan_all();
; 612  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 613  : 
; 614  : 			_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	mov	eax, DWORD PTR __Ptr$20605[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]

; 615  : 			_Mylast = _Ptr + _Size;

	lea	ecx, DWORD PTR [ebx*8]
	sub	ecx, ebx
	mov	DWORD PTR [esi+12], edx
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [esi+8], edx

; 616  : 			_Myfirst = _Ptr;

	mov	DWORD PTR [esi+4], eax
$LN3@reserve@2:

; 617  : 			}
; 618  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z$0:

; 598  : 			_CATCH_ALL
; 599  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Ptr$20605[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 600  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN81@reserve@2:
$LN79@reserve@2:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T51404 = -20						; size = 1
$T51325 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$51408 = 8						; size = 1
_this$ = 8						; size = 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __Right$ = ecx

; 487  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	ebx, ecx
	mov	edi, DWORD PTR _this$[ebp]

; 488  : 		if (_Buy(_Right.size()))

	mov	eax, DWORD PTR [ebx+4]
	xor	ecx, ecx
	cmp	eax, ecx
	jne	SHORT $LN17@vector@2
	xor	esi, esi
	jmp	SHORT $LN18@vector@2
$LN17@vector@2:
	mov	ecx, DWORD PTR [ebx+8]
	sub	ecx, eax
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	xor	ecx, ecx
$LN18@vector@2:
	cmp	esi, ecx
	mov	DWORD PTR [edi+4], ecx
	mov	DWORD PTR [edi+8], ecx
	mov	DWORD PTR [edi+12], ecx
	je	SHORT $LN7@vector@2
	cmp	esi, 153391689				; 09249249H
	jbe	SHORT $LN20@vector@2
	call	?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
$LN73@vector@2:
$LN20@vector@2:
	mov	ecx, esi
	call	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
	lea	ecx, DWORD PTR [esi*8]
	sub	ecx, esi
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edi+12], edx

; 489  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 490  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	esi, DWORD PTR [ebx+8]
	cmp	DWORD PTR [ebx+4], esi
	jbe	SHORT $LN35@vector@2
	call	__invalid_parameter_noinfo
$LN35@vector@2:
	mov	ecx, DWORD PTR [ebx+4]
	cmp	ecx, DWORD PTR [ebx+8]
	mov	DWORD PTR $T51325[ebp], ecx
	jbe	SHORT $LN45@vector@2
	call	__invalid_parameter_noinfo
	mov	ecx, DWORD PTR $T51325[ebp]
$LN45@vector@2:
	mov	eax, DWORD PTR [edi+4]
	mov	BYTE PTR $T51404[ebp], 0
	mov	edx, DWORD PTR $T51404[ebp]
	push	edx
	mov	edx, DWORD PTR __Cat$51408[ebp]
	push	edx
	push	eax
	push	esi
	call	??$_Uninit_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	add	esp, 16					; 00000010H
	mov	DWORD PTR [edi+8], eax
$LN7@vector@2:

; 494  : 			_CATCH_END
; 495  : 		}

	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$0:

; 491  : 			_CATCH_ALL
; 492  : 			_Tidy();

	mov	esi, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 493  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN74@vector@2:
$LN72@vector@2:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = eax

; 458  : 		_Buy(0);

	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 459  : 		}

	ret	0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z$0
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
$T51531 = -80						; size = 28
$T51530 = -52						; size = 40
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Where$ = 16						; size = 8
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT

; 747  : 		{	// erase element at _Where

	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+100]
	mov	DWORD PTR fs:0, eax

; 748  : 
; 749  :  #if _HAS_ITERATOR_DEBUGGING
; 750  : 		if (_Where._Mycont != this || _Isnil(_Where._Mynode()))
; 751  : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 752  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 753  : 		++_Where;	// save successor iterator for return
; 754  : 		_Orphan_ptr(*this, _Erasednode);
; 755  : 
; 756  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 757  : 		if (_Isnil(_Where._Mynode()))

	mov	eax, DWORD PTR __Where$[esp+100]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LN40@erase@3

; 758  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

	push	27					; 0000001bH
	xor	esi, esi
	push	OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
	lea	ecx, DWORD PTR $T51531[esp+108]
	mov	DWORD PTR $T51531[esp+132], 15		; 0000000fH
	mov	DWORD PTR $T51531[esp+128], esi
	mov	BYTE PTR $T51531[esp+112], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	lea	eax, DWORD PTR $T51531[esp+100]
	push	eax
	lea	ecx, DWORD PTR $T51530[esp+104]
	mov	DWORD PTR __$EHRec$[esp+112], esi
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	push	OFFSET __TI3?AVout_of_range@std@@
	lea	ecx, DWORD PTR $T51530[esp+104]
	push	ecx
	mov	DWORD PTR $T51530[esp+108], OFFSET ??_7out_of_range@std@@6B@
	call	__CxxThrowException@8
$LN436@erase@3:
$LN40@erase@3:

; 759  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 760  : 		++_Where;	// save successor iterator for return

	lea	esi, DWORD PTR __Where$[esp+96]
	mov	ebp, eax
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::const_iterator::_Inc

; 761  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 762  : 
; 763  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 764  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 765  : 		_Nodeptr _Pnode = _Erasednode;
; 766  : 
; 767  : 		if (_Isnil(_Left(_Pnode)))

	mov	eax, DWORD PTR [ebp]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LN39@erase@3

; 768  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

	mov	edi, DWORD PTR [ebp+8]
	jmp	SHORT $LN431@erase@3
$LN39@erase@3:

; 769  : 		else if (_Isnil(_Right(_Pnode)))

	mov	edx, DWORD PTR [ebp+8]
	cmp	BYTE PTR [edx+41], 0
	je	SHORT $LN37@erase@3

; 770  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

	mov	edi, eax

; 771  : 		else

	jmp	SHORT $LN431@erase@3
$LN37@erase@3:

; 772  : 			{	// two subtrees, must lift successor node to replace erased
; 773  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 774  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

	mov	ecx, DWORD PTR __Where$[esp+100]

; 775  : 			}
; 776  : 
; 777  : 		if (_Pnode == _Erasednode)

	cmp	ecx, ebp
	mov	edi, DWORD PTR [ecx+8]
	jne	SHORT $LN35@erase@3
$LN431@erase@3:

; 778  : 			{	// at most one subtree, relink it
; 779  : 			_Fixnodeparent = _Parent(_Erasednode);
; 780  : 			if (!_Isnil(_Fixnode))

	cmp	BYTE PTR [edi+41], 0
	mov	esi, DWORD PTR [ebp+4]
	jne	SHORT $LN34@erase@3

; 781  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

	mov	DWORD PTR [edi+4], esi
$LN34@erase@3:

; 782  : 
; 783  : 			if (_Root() == _Erasednode)

	mov	ecx, DWORD PTR _this$[esp+96]
	mov	eax, DWORD PTR [ecx+4]
	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN33@erase@3

; 784  : 				_Root() = _Fixnode;	// link down from root

	mov	DWORD PTR [eax+4], edi
	jmp	SHORT $LN30@erase@3
$LN33@erase@3:

; 785  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

	cmp	DWORD PTR [esi], ebp
	jne	SHORT $LN31@erase@3

; 786  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

	mov	DWORD PTR [esi], edi

; 787  : 			else

	jmp	SHORT $LN30@erase@3
$LN31@erase@3:

; 788  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

	mov	DWORD PTR [esi+8], edi
$LN30@erase@3:

; 789  : 
; 790  : 			if (_Lmost() == _Erasednode)

	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], ebp
	jne	SHORT $LN29@erase@3

; 791  : 				_Lmost() = _Isnil(_Fixnode)
; 792  : 					? _Fixnodeparent	// smallest is parent of erased node
; 793  : 					: _Min(_Fixnode);	// smallest in relinked subtree

	cmp	BYTE PTR [edi+41], 0
	je	SHORT $LN43@erase@3
	mov	ecx, esi
	jmp	SHORT $LN139@erase@3
$LN43@erase@3:
	mov	eax, DWORD PTR [edi]
	cmp	BYTE PTR [eax+41], 0
	mov	ecx, edi
	jne	SHORT $LN139@erase@3
$LL140@erase@3:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LL140@erase@3
$LN139@erase@3:
	mov	DWORD PTR [edx], ecx
$LN29@erase@3:

; 794  : 
; 795  : 			if (_Rmost() == _Erasednode)

	mov	eax, DWORD PTR _this$[esp+96]
	mov	ebx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ebx+8], ebp
	jne	SHORT $LN217@erase@3

; 796  : 				_Rmost() = _Isnil(_Fixnode)
; 797  : 					? _Fixnodeparent	// largest is parent of erased node
; 798  : 					: _Max(_Fixnode);	// largest in relinked subtree

	cmp	BYTE PTR [edi+41], 0
	je	SHORT $LN45@erase@3
	mov	eax, esi
	mov	DWORD PTR [ebx+8], eax

; 799  : 			}
; 800  : 		else

	jmp	SHORT $LN217@erase@3
$LN45@erase@3:

; 796  : 				_Rmost() = _Isnil(_Fixnode)
; 797  : 					? _Fixnodeparent	// largest is parent of erased node
; 798  : 					: _Max(_Fixnode);	// largest in relinked subtree

	mov	eax, edi
	call	?_Max@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Max
	mov	DWORD PTR [ebx+8], eax

; 799  : 			}
; 800  : 		else

	jmp	SHORT $LN217@erase@3
$LN35@erase@3:

; 801  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 802  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

	mov	DWORD PTR [eax+4], ecx

; 803  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

	mov	edx, DWORD PTR [ebp]
	mov	DWORD PTR [ecx], edx

; 804  : 
; 805  : 			if (_Pnode == _Right(_Erasednode))

	cmp	ecx, DWORD PTR [ebp+8]
	jne	SHORT $LN26@erase@3

; 806  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	esi, ecx

; 807  : 			else

	jmp	SHORT $LN25@erase@3
$LN26@erase@3:

; 808  : 				{	// successor further down, link in place of erased
; 809  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's
; 810  : 				if (!_Isnil(_Fixnode))

	cmp	BYTE PTR [edi+41], 0
	mov	esi, DWORD PTR [ecx+4]
	jne	SHORT $LN24@erase@3

; 811  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

	mov	DWORD PTR [edi+4], esi
$LN24@erase@3:

; 812  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

	mov	DWORD PTR [esi], edi

; 813  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [ecx+8], eax

; 814  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

	mov	edx, DWORD PTR [ebp+8]
	mov	DWORD PTR [edx+4], ecx
$LN25@erase@3:

; 815  : 				}
; 816  : 
; 817  : 			if (_Root() == _Erasednode)

	mov	eax, DWORD PTR _this$[esp+96]
	mov	eax, DWORD PTR [eax+4]
	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN23@erase@3

; 818  : 				_Root() = _Pnode;	// link down from root

	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN20@erase@3
$LN23@erase@3:

; 819  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

	mov	eax, DWORD PTR [ebp+4]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN21@erase@3

; 820  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

	mov	DWORD PTR [eax], ecx

; 821  : 			else

	jmp	SHORT $LN20@erase@3
$LN21@erase@3:

; 822  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

	mov	DWORD PTR [eax+8], ecx
$LN20@erase@3:

; 823  : 
; 824  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

	mov	edx, DWORD PTR [ebp+4]
	mov	DWORD PTR [ecx+4], edx

; 825  : 			std::swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

	mov	dl, BYTE PTR [ebp+40]
	mov	al, BYTE PTR [ecx+40]
	mov	BYTE PTR [ecx+40], dl
	mov	BYTE PTR [ebp+40], al
$LN217@erase@3:

; 826  : 			}
; 827  : 
; 828  : 		if (_Color(_Erasednode) == _Black)

	mov	bl, 1
	cmp	BYTE PTR [ebp+40], bl
	jne	$LN19@erase@3

; 829  : 			{	// erasing black link, must recolor/rebalance tree
; 830  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 831  : 				_Fixnodeparent = _Parent(_Fixnode))

	mov	eax, DWORD PTR _this$[esp+96]
	mov	ecx, DWORD PTR [eax+4]
	cmp	edi, DWORD PTR [ecx+4]
	je	$LN16@erase@3
	npad	7
$LL18@erase@3:
	cmp	BYTE PTR [edi+40], bl
	jne	$LN16@erase@3

; 832  : 				if (_Fixnode == _Left(_Fixnodeparent))

	mov	ecx, DWORD PTR [esi]
	cmp	edi, ecx
	jne	SHORT $LN15@erase@3

; 833  : 					{	// fixup left subtree
; 834  : 					_Pnode = _Right(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi+8]

; 835  : 					if (_Color(_Pnode) == _Red)

	cmp	BYTE PTR [ecx+40], 0
	jne	SHORT $LN14@erase@3

; 836  : 						{	// rotate red up from right subtree
; 837  : 						_Color(_Pnode) = _Black;
; 838  : 						_Color(_Fixnodeparent) = _Red;
; 839  : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR _this$[esp+96]
	mov	BYTE PTR [ecx+40], bl
	push	edx
	mov	ecx, esi
	mov	BYTE PTR [esi+40], 0
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate

; 840  : 						_Pnode = _Right(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi+8]
$LN14@erase@3:

; 841  : 						}
; 842  : 
; 843  : 					if (_Isnil(_Pnode))

	cmp	BYTE PTR [ecx+41], 0

; 844  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 845  : 					else if (_Color(_Left(_Pnode)) == _Black

	jne	$LN434@erase@3

; 846  : 						&& _Color(_Right(_Pnode)) == _Black)

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+40], bl
	jne	SHORT $LN11@erase@3
	mov	edx, DWORD PTR [ecx+8]
	cmp	BYTE PTR [edx+40], bl
	je	SHORT $LN435@erase@3
$LN11@erase@3:

; 847  : 						{	// redden right subtree with black children
; 848  : 						_Color(_Pnode) = _Red;
; 849  : 						_Fixnode = _Fixnodeparent;
; 850  : 						}
; 851  : 					else
; 852  : 						{	// must rearrange right subtree
; 853  : 						if (_Color(_Right(_Pnode)) == _Black)

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+40], bl
	jne	SHORT $LN9@erase@3

; 854  : 							{	// rotate red up from left sub-subtree
; 855  : 							_Color(_Left(_Pnode)) = _Black;

	mov	edx, DWORD PTR [ecx]

; 856  : 							_Color(_Pnode) = _Red;
; 857  : 							_Rrotate(_Pnode);

	mov	eax, DWORD PTR _this$[esp+96]
	mov	BYTE PTR [edx+40], bl
	push	eax
	mov	BYTE PTR [ecx+40], 0
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate

; 858  : 							_Pnode = _Right(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi+8]
$LN9@erase@3:

; 859  : 							}
; 860  : 
; 861  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

	mov	dl, BYTE PTR [esi+40]
	mov	BYTE PTR [ecx+40], dl

; 862  : 						_Color(_Fixnodeparent) = _Black;

	mov	BYTE PTR [esi+40], bl

; 863  : 						_Color(_Right(_Pnode)) = _Black;

	mov	eax, DWORD PTR [ecx+8]

; 864  : 						_Lrotate(_Fixnodeparent);

	mov	ecx, DWORD PTR _this$[esp+96]
	push	ecx
	mov	ecx, esi
	mov	BYTE PTR [eax+40], bl
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate

; 865  : 						break;	// tree now recolored/rebalanced

	jmp	$LN16@erase@3
$LN15@erase@3:

; 866  : 						}
; 867  : 					}
; 868  : 				else
; 869  : 					{	// fixup right subtree
; 870  : 					_Pnode = _Left(_Fixnodeparent);
; 871  : 					if (_Color(_Pnode) == _Red)

	cmp	BYTE PTR [ecx+40], 0
	jne	SHORT $LN7@erase@3

; 872  : 						{	// rotate red up from left subtree
; 873  : 						_Color(_Pnode) = _Black;
; 874  : 						_Color(_Fixnodeparent) = _Red;
; 875  : 						_Rrotate(_Fixnodeparent);

	mov	eax, DWORD PTR _this$[esp+96]
	mov	BYTE PTR [ecx+40], bl
	push	eax
	mov	ecx, esi
	mov	BYTE PTR [esi+40], 0
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate

; 876  : 						_Pnode = _Left(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi]
$LN7@erase@3:

; 877  : 						}
; 878  : 					if (_Isnil(_Pnode))

	cmp	BYTE PTR [ecx+41], 0

; 879  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 880  : 					else if (_Color(_Right(_Pnode)) == _Black

	jne	SHORT $LN434@erase@3

; 881  : 						&& _Color(_Left(_Pnode)) == _Black)

	mov	edx, DWORD PTR [ecx+8]
	cmp	BYTE PTR [edx+40], bl
	jne	SHORT $LN4@erase@3
	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+40], bl
	jne	SHORT $LN4@erase@3
$LN435@erase@3:

; 882  : 						{	// redden left subtree with black children
; 883  : 						_Color(_Pnode) = _Red;

	mov	BYTE PTR [ecx+40], 0
$LN434@erase@3:

; 829  : 			{	// erasing black link, must recolor/rebalance tree
; 830  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 831  : 				_Fixnodeparent = _Parent(_Fixnode))

	mov	ecx, DWORD PTR _this$[esp+96]
	mov	edx, DWORD PTR [ecx+4]

; 884  : 						_Fixnode = _Fixnodeparent;

	mov	edi, esi
	cmp	edi, DWORD PTR [edx+4]
	mov	esi, DWORD PTR [esi+4]
	jne	$LL18@erase@3

; 829  : 			{	// erasing black link, must recolor/rebalance tree
; 830  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 831  : 				_Fixnodeparent = _Parent(_Fixnode))

	jmp	SHORT $LN16@erase@3
$LN4@erase@3:

; 885  : 						}
; 886  : 					else
; 887  : 						{	// must rearrange left subtree
; 888  : 						if (_Color(_Left(_Pnode)) == _Black)

	mov	edx, DWORD PTR [ecx]
	cmp	BYTE PTR [edx+40], bl
	jne	SHORT $LN2@erase@3

; 889  : 							{	// rotate red up from right sub-subtree
; 890  : 							_Color(_Right(_Pnode)) = _Black;

	mov	eax, DWORD PTR [ecx+8]

; 891  : 							_Color(_Pnode) = _Red;
; 892  : 							_Lrotate(_Pnode);

	mov	edx, DWORD PTR _this$[esp+96]
	mov	BYTE PTR [eax+40], bl
	push	edx
	mov	BYTE PTR [ecx+40], 0
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate

; 893  : 							_Pnode = _Left(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi]
$LN2@erase@3:

; 894  : 							}
; 895  : 
; 896  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

	mov	al, BYTE PTR [esi+40]

; 897  : 						_Color(_Fixnodeparent) = _Black;
; 898  : 						_Color(_Left(_Pnode)) = _Black;
; 899  : 						_Rrotate(_Fixnodeparent);

	mov	edx, DWORD PTR _this$[esp+96]
	mov	BYTE PTR [ecx+40], al
	mov	BYTE PTR [esi+40], bl
	mov	ecx, DWORD PTR [ecx]
	mov	BYTE PTR [ecx+40], bl
	push	edx
	mov	ecx, esi
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
$LN16@erase@3:

; 900  : 						break;	// tree now recolored/rebalanced
; 901  : 						}
; 902  : 					}
; 903  : 
; 904  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

	mov	BYTE PTR [edi+40], bl
$LN19@erase@3:

; 905  : 			}
; 906  : 
; 907  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node

	lea	ecx, DWORD PTR [ebp+16]
	call	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ

; 908  : 		this->_Alnod.deallocate(_Erasednode, 1);

	push	ebp
	call	??3@YAXPAX@Z				; operator delete

; 909  : 
; 910  : 		if (0 < _Mysize)

	mov	ecx, DWORD PTR _this$[esp+100]
	mov	eax, DWORD PTR [ecx+8]
	add	esp, 4
	test	eax, eax
	jbe	SHORT $LN1@erase@3

; 911  : 			--_Mysize;

	add	eax, -1
	mov	DWORD PTR [ecx+8], eax
$LN1@erase@3:

; 912  : 
; 913  : 		return (_Where);	// return successor iterator

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+96]
	mov	ecx, DWORD PTR __Where$[esp+96]
	mov	edx, DWORD PTR __Where$[esp+100]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 914  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+100]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 80					; 00000050H
	ret	16					; 00000010H
$LN433@erase@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z$0:
	lea	ecx, DWORD PTR $T51531[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-84]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
PUBLIC	?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T52356 = -4						; size = 4
?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z PROC ; Json::Value::getComment, COMDAT
; _this$ = eax
; ___$ReturnUdt$ = esi
; _placement$ = ecx

; 1352 : {

	push	ecx

; 1353 :    if ( hasComment(placement) )

	mov	eax, DWORD PTR [eax+12]
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	mov	DWORD PTR $T52356[esp+8], ebx
	je	SHORT $LN1@getComment
	mov	ecx, DWORD PTR [eax+ecx*4]
	cmp	ecx, ebx
	je	SHORT $LN1@getComment

; 1354 :       return comments_[placement].comment_;

	mov	eax, ecx
	push	edi
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], ebx
	mov	BYTE PTR [esi+4], bl
	lea	edi, DWORD PTR [eax+1]
	npad	7
$LL83@getComment:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	cmp	dl, bl
	jne	SHORT $LL83@getComment
	sub	eax, edi
	push	eax
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi

; 1355 :    return "";

	mov	eax, esi
	pop	ebx

; 1356 : }

	pop	ecx
	ret	0
$LN1@getComment:

; 1355 :    return "";

	push	ebx
	mov	DWORD PTR [esi+24], 15			; 0000000fH
	mov	DWORD PTR [esi+20], ebx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, esi
	mov	BYTE PTR [esi+4], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, esi
	pop	ebx

; 1356 : }

	pop	ecx
	ret	0
?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ENDP ; Json::Value::getComment
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41f0000000000000
PUBLIC	?asDouble@Value@Json@@QBENXZ			; Json::Value::asDouble
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?asDouble@Value@Json@@QBENXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?asDouble@Value@Json@@QBENXZ$0
__ehfuncinfo$?asDouble@Value@Json@@QBENXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?asDouble@Value@Json@@QBENXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?asDouble@Value@Json@@QBENXZ
_TEXT	SEGMENT
$T52661 = -84						; size = 28
$T52660 = -56						; size = 40
__$EHRec$ = -12						; size = 12
tv155 = 8						; size = 4
_this$ = 8						; size = 4
?asDouble@Value@Json@@QBENXZ PROC			; Json::Value::asDouble, COMDAT

; 771  : {

	push	-1
	push	__ehhandler$?asDouble@Value@Json@@QBENXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+88]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _this$[esp+84]

; 772  :    switch ( type_ )

	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 7
	ja	$LN2@asDouble
	jmp	DWORD PTR $LN20@asDouble[ecx*4]
$LN7@asDouble:

; 773  :    {
; 774  :    case nullValue:
; 775  :       return 0.0;
; 776  :    case intValue:
; 777  :       return value_.int_;

	fild	DWORD PTR [eax]

; 792  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+88]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 84					; 00000054H
	ret	4
$LN6@asDouble:

; 778  :    case uintValue:
; 779  :       return value_.uint_;

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	mov	DWORD PTR tv155[esp+84], eax
	fild	DWORD PTR tv155[esp+84]
	jge	SHORT $LN11@asDouble
	fadd	QWORD PTR __real@41f0000000000000

; 792  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+88]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 84					; 00000054H
	ret	4
$LN5@asDouble:

; 780  :    case realValue:
; 781  :       return value_.real_;

	fld	QWORD PTR [eax]

; 792  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+88]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 84					; 00000054H
	ret	4
$LN4@asDouble:

; 782  :    case booleanValue:
; 783  :       return value_.bool_ ? 1.0 : 0.0;

	cmp	BYTE PTR [eax], 0
	je	SHORT $LN2@asDouble
	fld1

; 792  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+88]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 84					; 00000054H
	ret	4
$LN3@asDouble:

; 784  :    case stringValue:
; 785  :    case arrayValue:
; 786  :    case objectValue:
; 787  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to double" );

	push	OFFSET ??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doubl@
	lea	ecx, DWORD PTR $T52661[esp+92]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	ecx, DWORD PTR $T52661[esp+88]
	push	ecx
	lea	edx, DWORD PTR $T52660[esp+92]
	push	edx
	mov	DWORD PTR __$EHRec$[esp+104], 0
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T52660[esp+92]
	push	eax
	call	__CxxThrowException@8
$LN21@asDouble:
$LN2@asDouble:

; 788  :    default:
; 789  :       JSON_ASSERT_UNREACHABLE;
; 790  :    }
; 791  :    return 0; // unreachable;

	fldz
$LN11@asDouble:

; 792  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+88]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 84					; 00000054H
	ret	4
$LN19@asDouble:
	npad	2
$LN20@asDouble:
	DD	$LN2@asDouble
	DD	$LN7@asDouble
	DD	$LN6@asDouble
	DD	$LN5@asDouble
	DD	$LN3@asDouble
	DD	$LN4@asDouble
	DD	$LN3@asDouble
	DD	$LN3@asDouble
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?asDouble@Value@Json@@QBENXZ$0:
	lea	ecx, DWORD PTR $T52661[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?asDouble@Value@Json@@QBENXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-72]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?asDouble@Value@Json@@QBENXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?asDouble@Value@Json@@QBENXZ ENDP			; Json::Value::asDouble
PUBLIC	__real@41efffffffe00000
PUBLIC	?asUInt@Value@Json@@QBEIXZ			; Json::Value::asUInt
;	COMDAT __real@41efffffffe00000
CONST	SEGMENT
__real@41efffffffe00000 DQ 041efffffffe00000r	; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?asUInt@Value@Json@@QBEIXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?asUInt@Value@Json@@QBEIXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?asUInt@Value@Json@@QBEIXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?asUInt@Value@Json@@QBEIXZ$2
__ehfuncinfo$?asUInt@Value@Json@@QBEIXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?asUInt@Value@Json@@QBEIXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?asUInt@Value@Json@@QBEIXZ
_TEXT	SEGMENT
tv178 = -226						; size = 2
tv175 = -224						; size = 4
tv173 = -224						; size = 8
$T52684 = -216						; size = 28
$T52682 = -188						; size = 28
$T52686 = -160						; size = 28
$T52681 = -132						; size = 40
$T52683 = -92						; size = 40
$T52685 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?asUInt@Value@Json@@QBEIXZ PROC				; Json::Value::asUInt, COMDAT
; _this$ = ecx

; 744  : {

	push	-1
	push	__ehhandler$?asUInt@Value@Json@@QBEIXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+236]
	mov	DWORD PTR fs:0, eax

; 745  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	cmp	eax, 7
	ja	$LN2@asUInt
	jmp	DWORD PTR $LN21@asUInt[eax*4]
$LN10@asUInt:

; 746  :    {
; 747  :    case nullValue:
; 748  :       return 0;
; 749  :    case intValue:
; 750  :       JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to unsigned integer" );

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jge	$LN14@asUInt
	push	OFFSET ??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5conv@
	lea	ecx, DWORD PTR $T52682[esp+240]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	eax, DWORD PTR $T52682[esp+236]
	push	eax
	lea	ecx, DWORD PTR $T52681[esp+240]
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+252], 0
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	edx, DWORD PTR $T52681[esp+240]
	push	edx
	call	__CxxThrowException@8
$LN22@asUInt:
$LN8@asUInt:

; 751  :       return value_.int_;
; 752  :    case uintValue:
; 753  :       return value_.uint_;

	mov	eax, DWORD PTR [ecx]

; 767  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+236]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 232				; 000000e8H
	ret	0
$LN7@asUInt:

; 754  :    case realValue:
; 755  :       JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt,  "Real out of unsigned integer range" );

	fldz
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@asUInt
	fld	QWORD PTR __real@41efffffffe00000
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@asUInt

; 756  :       return UInt( value_.real_ );

	fld	QWORD PTR [ecx]
	fnstcw	WORD PTR tv178[esp+236]
	movzx	eax, WORD PTR tv178[esp+236]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv175[esp+236], eax
	fldcw	WORD PTR tv175[esp+236]
	fistp	QWORD PTR tv173[esp+236]
	mov	eax, DWORD PTR tv173[esp+236]
	fldcw	WORD PTR tv178[esp+236]

; 767  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+236]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 232				; 000000e8H
	ret	0
$LN5@asUInt:

; 754  :    case realValue:
; 755  :       JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt,  "Real out of unsigned integer range" );

	push	OFFSET ??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ran@
	lea	ecx, DWORD PTR $T52684[esp+240]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	eax, DWORD PTR $T52684[esp+236]
	push	eax
	lea	ecx, DWORD PTR $T52683[esp+240]
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+252], 1
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	edx, DWORD PTR $T52683[esp+240]
	push	edx
	call	__CxxThrowException@8
$LN23@asUInt:
$LN4@asUInt:

; 757  :    case booleanValue:
; 758  :       return value_.bool_ ? 1 : 0;

	xor	eax, eax
	cmp	BYTE PTR [ecx], al
	setne	al

; 767  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+236]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 232				; 000000e8H
	ret	0
$LN3@asUInt:

; 759  :    case stringValue:
; 760  :    case arrayValue:
; 761  :    case objectValue:
; 762  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to uint" );

	push	OFFSET ??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint?$AA@
	lea	ecx, DWORD PTR $T52686[esp+240]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	eax, DWORD PTR $T52686[esp+236]
	push	eax
	lea	ecx, DWORD PTR $T52685[esp+240]
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+252], 2
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	edx, DWORD PTR $T52685[esp+240]
	push	edx
	call	__CxxThrowException@8
$LN24@asUInt:
$LN2@asUInt:

; 763  :    default:
; 764  :       JSON_ASSERT_UNREACHABLE;
; 765  :    }
; 766  :    return 0; // unreachable;

	xor	eax, eax
$LN14@asUInt:

; 767  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+236]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 232				; 000000e8H
	ret	0
$LN20@asUInt:
	npad	3
$LN21@asUInt:
	DD	$LN2@asUInt
	DD	$LN10@asUInt
	DD	$LN8@asUInt
	DD	$LN7@asUInt
	DD	$LN3@asUInt
	DD	$LN4@asUInt
	DD	$LN3@asUInt
	DD	$LN3@asUInt
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?asUInt@Value@Json@@QBEIXZ$0:
	lea	ecx, DWORD PTR $T52682[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?asUInt@Value@Json@@QBEIXZ$1:
	lea	ecx, DWORD PTR $T52684[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?asUInt@Value@Json@@QBEIXZ$2:
	lea	ecx, DWORD PTR $T52686[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?asUInt@Value@Json@@QBEIXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-220]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?asUInt@Value@Json@@QBEIXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?asUInt@Value@Json@@QBEIXZ ENDP				; Json::Value::asUInt
PUBLIC	__real@41dfffffffc00000
PUBLIC	__real@c1e0000000000000
PUBLIC	?asInt@Value@Json@@QBEHXZ			; Json::Value::asInt
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@41dfffffffc00000
CONST	SEGMENT
__real@41dfffffffc00000 DQ 041dfffffffc00000r	; 2.14748e+009
CONST	ENDS
;	COMDAT __real@c1e0000000000000
CONST	SEGMENT
__real@c1e0000000000000 DQ 0c1e0000000000000r	; -2.14748e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?asInt@Value@Json@@QBEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?asInt@Value@Json@@QBEHXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?asInt@Value@Json@@QBEHXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?asInt@Value@Json@@QBEHXZ$2
__ehfuncinfo$?asInt@Value@Json@@QBEHXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?asInt@Value@Json@@QBEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?asInt@Value@Json@@QBEHXZ
_TEXT	SEGMENT
$T52711 = -216						; size = 28
$T52709 = -188						; size = 28
$T52707 = -160						; size = 28
$T52706 = -132						; size = 40
$T52708 = -92						; size = 40
$T52710 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?asInt@Value@Json@@QBEHXZ PROC				; Json::Value::asInt, COMDAT
; _this$ = ecx

; 717  : {

	push	-1
	push	__ehhandler$?asInt@Value@Json@@QBEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+220]
	mov	DWORD PTR fs:0, eax

; 718  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	cmp	eax, 7
	ja	$LN2@asInt
	jmp	DWORD PTR $LN21@asInt[eax*4]
$LN10@asInt:

; 719  :    {
; 720  :    case nullValue:
; 721  :       return 0;
; 722  :    case intValue:
; 723  :       return value_.int_;

	mov	eax, DWORD PTR [ecx]

; 740  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+220]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 216				; 000000d8H
	ret	0
$LN9@asInt:

; 724  :    case uintValue:
; 725  :       JSON_ASSERT_MESSAGE( value_.uint_ < (unsigned)maxInt, "integer out of signed integer range" );

	mov	eax, DWORD PTR [ecx]
	cmp	eax, 2147483647				; 7fffffffH
	jb	$LN14@asInt
	push	OFFSET ??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5ra@
	lea	ecx, DWORD PTR $T52707[esp+224]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	eax, DWORD PTR $T52707[esp+220]
	push	eax
	lea	ecx, DWORD PTR $T52706[esp+224]
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+236], 0
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	edx, DWORD PTR $T52706[esp+224]
	push	edx
	call	__CxxThrowException@8
$LN22@asInt:
$LN7@asInt:

; 726  :       return value_.uint_;
; 727  :    case realValue:
; 728  :       JSON_ASSERT_MESSAGE( value_.real_ >= minInt  &&  value_.real_ <= maxInt, "Real out of signed integer range" );

	fld	QWORD PTR __real@c1e0000000000000
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@asInt
	fld	QWORD PTR __real@41dfffffffc00000
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@asInt

; 729  :       return Int( value_.real_ );

	fld	QWORD PTR [ecx]
	call	__ftol2_sse

; 740  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+220]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 216				; 000000d8H
	ret	0
$LN5@asInt:

; 726  :       return value_.uint_;
; 727  :    case realValue:
; 728  :       JSON_ASSERT_MESSAGE( value_.real_ >= minInt  &&  value_.real_ <= maxInt, "Real out of signed integer range" );

	push	OFFSET ??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5range@
	lea	ecx, DWORD PTR $T52709[esp+224]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	eax, DWORD PTR $T52709[esp+220]
	push	eax
	lea	ecx, DWORD PTR $T52708[esp+224]
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+236], 1
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	edx, DWORD PTR $T52708[esp+224]
	push	edx
	call	__CxxThrowException@8
$LN23@asInt:
$LN4@asInt:

; 730  :    case booleanValue:
; 731  :       return value_.bool_ ? 1 : 0;

	xor	eax, eax
	cmp	BYTE PTR [ecx], al
	setne	al

; 740  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+220]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 216				; 000000d8H
	ret	0
$LN3@asInt:

; 732  :    case stringValue:
; 733  :    case arrayValue:
; 734  :    case objectValue:
; 735  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to int" );

	push	OFFSET ??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int?$AA@
	lea	ecx, DWORD PTR $T52711[esp+224]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	lea	eax, DWORD PTR $T52711[esp+220]
	push	eax
	lea	ecx, DWORD PTR $T52710[esp+224]
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+236], 2
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	edx, DWORD PTR $T52710[esp+224]
	push	edx
	call	__CxxThrowException@8
$LN24@asInt:
$LN2@asInt:

; 736  :    default:
; 737  :       JSON_ASSERT_UNREACHABLE;
; 738  :    }
; 739  :    return 0; // unreachable;

	xor	eax, eax
$LN14@asInt:

; 740  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+220]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 216				; 000000d8H
	ret	0
$LN20@asInt:
	npad	1
$LN21@asInt:
	DD	$LN2@asInt
	DD	$LN10@asInt
	DD	$LN9@asInt
	DD	$LN7@asInt
	DD	$LN3@asInt
	DD	$LN4@asInt
	DD	$LN3@asInt
	DD	$LN3@asInt
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?asInt@Value@Json@@QBEHXZ$0:
	lea	ecx, DWORD PTR $T52707[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?asInt@Value@Json@@QBEHXZ$1:
	lea	ecx, DWORD PTR $T52709[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?asInt@Value@Json@@QBEHXZ$2:
	lea	ecx, DWORD PTR $T52711[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?asInt@Value@Json@@QBEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-204]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?asInt@Value@Json@@QBEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?asInt@Value@Json@@QBEHXZ ENDP				; Json::Value::asInt
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$4
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__catchsym$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0
__catchsym$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$2
__tryblocktable$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$5
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$6
__ehfuncinfo$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Ptr$21652 = -60					; size = 4
tv745 = -56						; size = 4
_this$GSCopy$ = -56					; size = 4
__Newvec$21651 = -56					; size = 4
__Cat$55749 = -52					; size = 1
__Cat$55690 = -52					; size = 1
$T55661 = -52						; size = 1
__Cat$55665 = -52					; size = 1
$T55626 = -52						; size = 1
__Cat$55629 = -52					; size = 1
__Cat$55532 = -52					; size = 1
__Cat$55565 = -52					; size = 1
$T55494 = -52						; size = 1
__Cat$55498 = -52					; size = 1
$T55437 = -52						; size = 1
__Cat$55441 = -52					; size = 1
$T55401 = -52						; size = 1
__Cat$55405 = -52					; size = 1
__Count$ = -52						; size = 4
__Tmp$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
__Where$ = 12						; size = 8
?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert_n, COMDAT
; _this$ = ecx

; 1117 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	eax, DWORD PTR __Val$[ebp]

; 1118 : 
; 1119 :  #if _HAS_ITERATOR_DEBUGGING
; 1120 : 		if (_Where._Mycont != this
; 1121 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1122 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1123 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1124 : 
; 1125 : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

	push	-1
	xor	esi, esi
	mov	ebx, ecx
	push	esi
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR _this$GSCopy$[ebp], ebx
	mov	DWORD PTR __Tmp$[ebp+24], 15		; 0000000fH
	mov	DWORD PTR __Tmp$[ebp+20], esi
	mov	BYTE PTR __Tmp$[ebp+4], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	DWORD PTR __$EHRec$[ebp+12], esi

; 1126 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR [ebx+4]
	cmp	ecx, esi
	je	SHORT $LN206@Insert_n
	mov	edi, DWORD PTR [ebx+12]
	sub	edi, ecx
	mov	eax, -1840700269			; 92492493H
	imul	edi
	add	edx, edi
	sar	edx, 4
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
$LN206@Insert_n:

; 1127 : 
; 1128 : 		if (_Count == 0)
; 1129 : 			;
; 1130 : 		else if (max_size() - size() < _Count)

	test	ecx, ecx
	jne	SHORT $LN70@Insert_n
	xor	eax, eax
	jmp	SHORT $LN71@Insert_n
$LN70@Insert_n:
	mov	edi, DWORD PTR [ebx+8]
	sub	edi, ecx
	mov	eax, -1840700269			; 92492493H
	imul	edi
	add	edx, edi
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
$LN71@Insert_n:
	mov	edx, 153391689				; 09249249H
	sub	edx, eax
	cmp	edx, 1
	jae	SHORT $LN10@Insert_n

; 1131 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@KAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
$LN210@Insert_n:
$LN10@Insert_n:

; 1132 : 		else if (_Capacity < size() + _Count)

	test	ecx, ecx
	jne	SHORT $LN74@Insert_n
	xor	eax, eax
	jmp	SHORT $LN75@Insert_n
$LN74@Insert_n:
	mov	edi, DWORD PTR [ebx+8]
	sub	edi, ecx
	mov	eax, -1840700269			; 92492493H
	imul	edi
	add	edx, edi
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
$LN75@Insert_n:
	add	eax, 1
	cmp	esi, eax
	jae	$LN8@Insert_n

; 1133 : 			{	// not enough room, reallocate
; 1134 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1135 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	eax, esi
	shr	eax, 1
	mov	edx, 153391689				; 09249249H
	sub	edx, eax
	cmp	edx, esi
	jae	SHORT $LN15@Insert_n
	xor	esi, esi
	jmp	SHORT $LN16@Insert_n
$LN15@Insert_n:
	add	esi, eax
$LN16@Insert_n:

; 1136 : 			if (_Capacity < size() + _Count)

	test	ecx, ecx
	jne	SHORT $LN84@Insert_n
	xor	eax, eax
	jmp	SHORT $LN85@Insert_n
$LN84@Insert_n:
	mov	edi, DWORD PTR [ebx+8]
	sub	edi, ecx
	mov	eax, -1840700269			; 92492493H
	imul	edi
	add	edx, edi
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
$LN85@Insert_n:
	add	eax, 1
	cmp	esi, eax
	jae	SHORT $LN7@Insert_n

; 1137 : 				_Capacity = size() + _Count;

	mov	ecx, ebx
	call	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
	mov	esi, eax
	add	esi, 1
$LN7@Insert_n:

; 1138 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, esi
	call	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate

; 1139 : 			pointer _Ptr = _Newvec;
; 1140 : 
; 1141 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1142 : 			_Ptr = _Umove(_Myfirst, _VEC_ITER_BASE(_Where),
; 1143 : 				_Newvec);	// copy prefix

	mov	ecx, DWORD PTR [ebx+4]
	mov	BYTE PTR $T55401[ebp], 0
	mov	edx, DWORD PTR $T55401[ebp]
	push	edx
	mov	edx, DWORD PTR __Cat$55405[ebp]
	push	edx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	edx
	mov	edx, eax
	mov	DWORD PTR __Newvec$21651[ebp], eax
	mov	DWORD PTR __Ptr$21652[ebp], eax
	call	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	mov	edi, eax
	add	esp, 12					; 0000000cH

; 1144 : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

	mov	BYTE PTR $T55437[ebp], 0
	mov	eax, DWORD PTR $T55437[ebp]
	mov	ecx, DWORD PTR __Cat$55441[ebp]
	push	eax
	push	ecx
	lea	edx, DWORD PTR __Tmp$[ebp]
	push	edx
	push	edi
	mov	ecx, 1
	mov	DWORD PTR __Ptr$21652[ebp], edi
	call	??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1145 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

	mov	eax, DWORD PTR [ebx+8]
	add	esp, 16					; 00000010H
	mov	BYTE PTR $T55494[ebp], 0
	mov	ecx, DWORD PTR $T55494[ebp]
	mov	edx, DWORD PTR __Cat$55498[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	edx
	add	edi, 28					; 0000001cH
	push	eax
	mov	edx, edi
	mov	DWORD PTR __Ptr$21652[ebp], edi
	call	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1150 : 			_CATCH_END
; 1151 : 
; 1152 : 			_Count += size();

	mov	edi, DWORD PTR [ebx+4]
	add	esp, 12					; 0000000cH
	test	edi, edi
	jne	SHORT $LN130@Insert_n
	xor	eax, eax
	jmp	SHORT $LN131@Insert_n
$LN130@Insert_n:
	mov	ecx, DWORD PTR [ebx+8]
	sub	ecx, edi
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
$LN131@Insert_n:
	add	eax, 1

; 1153 : 			if (_Myfirst != 0)

	test	edi, edi
	mov	DWORD PTR __Count$[ebp], eax
	je	SHORT $LN138@Insert_n

; 1154 : 				{	// destroy and deallocate old array
; 1155 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR __Cat$55565[ebp]
	mov	edi, DWORD PTR [ebx+8]
	push	eax
	mov	eax, DWORD PTR [ebx+4]
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1156 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR [ebx+4]
	add	esp, 4
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	mov	eax, DWORD PTR __Count$[ebp]
	add	esp, 4
$LN138@Insert_n:

; 1157 : 				}
; 1158 : 
; 1159 :  #if _HAS_ITERATOR_DEBUGGING
; 1160 : 			this->_Orphan_all();
; 1161 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1162 : 
; 1163 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Newvec$21651[ebp]
	lea	edx, DWORD PTR [esi*8]
	sub	edx, esi
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [ebx+12], edx

; 1164 : 			_Mylast = _Newvec + _Count;

	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [ebx+8], eax

; 1165 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [ebx+4], ecx
	jmp	$LN1@Insert_n
__catch$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0:

; 1146 : 			_CATCH_ALL
; 1147 : 			_Destroy(_Newvec, _Ptr);

	mov	ecx, DWORD PTR __Cat$55532[ebp]
	mov	esi, DWORD PTR __Newvec$21651[ebp]
	mov	edi, DWORD PTR __Ptr$21652[ebp]
	push	ecx
	mov	eax, esi
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	add	esp, 4

; 1148 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1149 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN211@Insert_n:
$LN8@Insert_n:

; 1166 : 			}
; 1167 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edi, DWORD PTR [ebx+8]
	mov	esi, DWORD PTR __Where$[ebp+4]
	mov	ecx, edi
	sub	ecx, esi
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1168 : 			{	// new stuff spills off end
; 1169 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1170 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	BYTE PTR $T55626[ebp], 0
	cmp	eax, 1
	mov	eax, DWORD PTR __Cat$55629[ebp]
	jae	$LN3@Insert_n
	mov	ecx, DWORD PTR $T55626[ebp]
	push	ecx
	push	eax
	lea	edx, DWORD PTR [esi+28]
	push	edi
	mov	ecx, esi
	call	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1171 : 
; 1172 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 1173 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1174 : 				_Tmp);	// insert new stuff off end

	mov	edi, DWORD PTR [ebx+8]
	mov	ecx, edi
	sub	ecx, esi
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	edx, ecx
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T55661[ebp], 0
	mov	eax, DWORD PTR $T55661[ebp]
	push	eax
	mov	ecx, 1
	sub	ecx, edx
	mov	edx, DWORD PTR __Cat$55665[ebp]
	push	edx
	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	push	edi
	call	??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1178 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	add	esp, 16					; 00000010H

; 1179 : 
; 1180 : 			_Mylast += _Count;

	add	DWORD PTR [ebx+8], 28			; 0000001cH
	mov	ebx, DWORD PTR [ebx+8]

; 1181 : 
; 1182 :  #if _HAS_ITERATOR_DEBUGGING
; 1183 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1184 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1185 : 
; 1186 : 			fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1187 : 				_Tmp);	// insert up to old end

	lea	edi, DWORD PTR [ebx-28]

; 1188 : 			}
; 1189 : 		else

	jmp	SHORT $LN209@Insert_n
__catch$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$2:

; 1175 : 			_CATCH_ALL
; 1176 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR _this$GSCopy$[ebp]
	mov	ecx, DWORD PTR __Cat$55690[ebp]
	mov	edi, DWORD PTR [edx+8]
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	ecx
	add	edi, 28					; 0000001cH
	add	eax, 28					; 0000001cH
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	add	esp, 4

; 1177 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN212@Insert_n:
$LN3@Insert_n:

; 1190 : 			{	// new stuff can all be assigned
; 1191 : 			pointer _Oldend = _Mylast;
; 1192 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1193 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR __Cat$55749[ebp]
	push	eax
	push	edx
	lea	ecx, DWORD PTR [edi-28]
	push	edi
	mov	edx, edi
	mov	DWORD PTR tv745[ebp], ecx
	call	??$_Uninit_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Swap_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	mov	DWORD PTR [ebx+8], eax

; 1194 : 
; 1195 :  #if _HAS_ITERATOR_DEBUGGING
; 1196 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1197 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1198 : 
; 1199 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1200 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR tv745[ebp]
	add	esp, 12					; 0000000cH
	mov	ebx, esi
	call	??$_Unchecked_move_backward@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@stdext@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@00@Z ; stdext::_Unchecked_move_backward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>

; 1201 : 			fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1202 : 				_Tmp);	// insert into hole

	lea	edi, DWORD PTR [esi+28]
$LN209@Insert_n:
	lea	ebx, DWORD PTR __Tmp$[ebp]
	mov	eax, esi
	call	??$fill@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0ABV10@@Z ; std::fill<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
$LN1@Insert_n:

; 1203 : 			}
; 1204 : 		}

	cmp	DWORD PTR __Tmp$[ebp+24], 16		; 00000010H
	jb	SHORT $LN196@Insert_n
	mov	eax, DWORD PTR __Tmp$[ebp+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN196@Insert_n:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN208@Insert_n:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$4:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert_n
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@V32@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
tv90 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
__Tmp$56014 = 16					; size = 8
__Where$ = 16						; size = 8
?insert@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@V32@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert, COMDAT
; _this$ = eax

; 852  : 		{	// insert _Val at _Where

	push	ecx
	push	ebx
	push	ebp

; 853  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	ebp, DWORD PTR __Where$[esp+12]
	push	esi
	mov	esi, eax
	push	edi
	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	je	SHORT $LN48@insert@2
	mov	ebx, DWORD PTR [esi+8]
	mov	ecx, ebx
	sub	ecx, edi
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	jne	SHORT $LN3@insert@2
$LN48@insert@2:
	mov	ebx, DWORD PTR __Where$[esp+16]
	xor	edi, edi
	jmp	SHORT $LN4@insert@2
$LN3@insert@2:
	cmp	edi, ebx
	jbe	SHORT $LN14@insert@2
	call	__invalid_parameter_noinfo
$LN14@insert@2:
	mov	ebx, DWORD PTR __Where$[esp+16]
	test	ebx, ebx
	je	SHORT $LN23@insert@2
	cmp	ebx, esi
	je	SHORT $LN24@insert@2
$LN23@insert@2:
	call	__invalid_parameter_noinfo
$LN24@insert@2:
	mov	ecx, ebp
	sub	ecx, edi
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx
$LN4@insert@2:

; 854  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	ecx, DWORD PTR __Val$[esp+16]
	push	ebp
	push	ebx
	push	ecx
	mov	ecx, esi
	call	?_Insert_n@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert_n

; 855  : 		return (begin() + _Off);

	mov	ebx, DWORD PTR [esi+4]
	cmp	ebx, DWORD PTR [esi+8]
	jbe	SHORT $LN32@insert@2
	call	__invalid_parameter_noinfo
$LN32@insert@2:
	lea	edx, DWORD PTR [edi*8]
	sub	edx, edi
	lea	edi, DWORD PTR [ebx+edx*4]
	cmp	edi, DWORD PTR [esi+8]
	mov	DWORD PTR __Tmp$56014[esp+20], ebx
	ja	SHORT $LN43@insert@2
	cmp	edi, DWORD PTR [esi+4]
	jae	SHORT $LN44@insert@2
$LN43@insert@2:
	call	__invalid_parameter_noinfo
$LN44@insert@2:
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]
	mov	DWORD PTR [eax+4], edi

; 856  : 		}

	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	16					; 00000010H
?insert@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@V32@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
$T56030 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
$T56029 = 12						; size = 8
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT
; _this$ = edi

; 918  : 		if (_First == begin() && _Last == end())

	mov	eax, DWORD PTR [edi+4]
	sub	esp, 12					; 0000000cH
	push	ebx
	mov	ebx, DWORD PTR [eax]
	push	ebp
	mov	ebp, DWORD PTR __First$[esp+16]
	test	ebp, ebp
	push	esi
	je	SHORT $LN22@erase@4
	cmp	ebp, edi
	je	SHORT $LN23@erase@4
$LN22@erase@4:
	call	__invalid_parameter_noinfo
$LN23@erase@4:
	mov	esi, DWORD PTR __First$[esp+24]
	cmp	esi, ebx
	jne	SHORT $LL2@erase@4
	mov	eax, DWORD PTR __Last$[esp+20]
	test	eax, eax
	mov	ebx, DWORD PTR [edi+4]
	je	SHORT $LN37@erase@4
	cmp	eax, edi
	je	SHORT $LN38@erase@4
$LN37@erase@4:
	call	__invalid_parameter_noinfo
$LN38@erase@4:
	cmp	DWORD PTR __Last$[esp+24], ebx
	jne	SHORT $LL2@erase@4

; 919  : 			{	// erase all
; 920  : 			clear();

	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, edi
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edi+8], 0
	mov	DWORD PTR [eax], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+8], eax

; 921  : 			return (begin());

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+20]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], edi

; 928  : 			}
; 929  : 		}

	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	20					; 00000014H
	npad	5
$LL2@erase@4:

; 922  : 			}
; 923  : 		else
; 924  : 			{	// partial erase, one at a time
; 925  : 			while (_First != _Last)

	test	ebp, ebp
	je	SHORT $LN76@erase@4
	cmp	ebp, DWORD PTR __Last$[esp+20]
	je	SHORT $LN77@erase@4
$LN76@erase@4:
	call	__invalid_parameter_noinfo
$LN77@erase@4:
	cmp	esi, DWORD PTR __Last$[esp+24]
	je	SHORT $LN1@erase@4

; 926  : 				erase(_First++);

	test	ebp, ebp
	mov	DWORD PTR $T56029[esp+24], esi
	jne	SHORT $LN92@erase@4
	call	__invalid_parameter_noinfo
$LN92@erase@4:
	cmp	BYTE PTR [esi+41], 0
	je	SHORT $LN91@erase@4
	call	__invalid_parameter_noinfo
	jmp	SHORT $LN88@erase@4
$LN91@erase@4:
	mov	eax, DWORD PTR [esi+8]
	cmp	BYTE PTR [eax+41], 0
	jne	SHORT $LN121@erase@4
	mov	esi, eax
	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [eax+41], 0
	jne	SHORT $LN88@erase@4
$LL104@erase@4:
	mov	esi, eax
	mov	eax, DWORD PTR [esi]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LL104@erase@4
	jmp	SHORT $LN88@erase@4
$LN121@erase@4:
	mov	eax, DWORD PTR [esi+4]
	cmp	BYTE PTR [eax+41], 0
	jne	SHORT $LN86@erase@4
$LL87@erase@4:
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN86@erase@4
	mov	esi, eax
	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+41], 0
	je	SHORT $LL87@erase@4
$LN86@erase@4:
	mov	esi, eax
$LN88@erase@4:
	mov	edx, DWORD PTR $T56029[esp+24]
	push	edx
	push	ebp
	lea	eax, DWORD PTR $T56030[esp+32]
	push	eax
	push	edi
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
	jmp	SHORT $LL2@erase@4
$LN1@erase@4:

; 927  : 			return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+20]
	mov	DWORD PTR [eax+4], esi

; 928  : 			}
; 929  : 		}

	pop	esi
	mov	DWORD PTR [eax], ebp
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	20					; 00000014H
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\vector
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
$T56459 = -8						; size = 8
$T56492 = 8						; size = 1
__Cat$56496 = 8						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = esi

; 786  : 		{	// insert element at end

	sub	esp, 12					; 0000000cH
	push	ebx

; 787  : 		if (size() < capacity())

	mov	ebx, DWORD PTR [esi+4]
	test	ebx, ebx
	push	ebp
	mov	ebp, DWORD PTR __Val$[esp+16]
	push	edi
	jne	SHORT $LN7@push_back
	xor	edi, edi
	jmp	SHORT $LN8@push_back
$LN7@push_back:
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, ebx
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx
$LN8@push_back:
	test	ebx, ebx
	je	SHORT $LN2@push_back
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, ebx
	mov	eax, -1840700269			; 92492493H
	imul	ecx
	add	edx, ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	edi, eax
	jae	SHORT $LN2@push_back

; 788  : 
; 789  :  #if _HAS_ITERATOR_DEBUGGING
; 790  : 			{ // room at end, construct it there
; 791  : 			_Orphan_range(_Mylast, _Mylast);
; 792  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 793  : 			}
; 794  : 
; 795  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 796  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edi, DWORD PTR [esi+8]
	mov	BYTE PTR $T56492[esp+20], 0
	mov	eax, DWORD PTR $T56492[esp+20]
	mov	ecx, DWORD PTR __Cat$56496[esp+20]
	push	eax
	push	ecx
	push	ebp
	push	edi
	mov	ecx, 1
	call	??$_Uninit_fill_n@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@IABV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	add	esp, 16					; 00000010H
	add	edi, 28					; 0000001cH
	mov	DWORD PTR [esi+8], edi

; 801  : 		}

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	4
$LN2@push_back:

; 797  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 798  : 
; 799  : 		else
; 800  : 			insert(end(), _Val);

	mov	edi, DWORD PTR [esi+8]
	cmp	ebx, edi
	jbe	SHORT $LN24@push_back
	call	__invalid_parameter_noinfo
$LN24@push_back:
	push	edi
	push	esi
	push	ebp
	lea	edx, DWORD PTR $T56459[esp+36]
	push	edx
	mov	eax, esi
	call	?insert@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@V32@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert

; 801  : 		}

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
PUBLIC	?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; Json::Value::getMemberNames
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 8\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$2
__ehfuncinfo$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
xdata$x	ENDS
;	COMDAT ?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
_TEXT	SEGMENT
$T56549 = -68						; size = 4
$T56546 = -68						; size = 8
_members$ = -60						; size = 16
$T56547 = -44						; size = 28
__$EHRec$ = -12						; size = 12
__Cat$57337 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ PROC ; Json::Value::getMemberNames, COMDAT
; _this$ = ecx

; 1206 : {

	push	-1
	push	__ehhandler$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+88]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 1214 :    ObjectValues::const_iterator itEnd = value_.map_->end();

	xor	ebx, ebx
	mov	DWORD PTR $T56549[esp+88], ebx
	cmp	BYTE PTR [esi+8], bl
	jne	SHORT $LN4@getMemberN
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+84]
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	jmp	$LN5@getMemberN
$LN4@getMemberN:

; 1207 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1208 :    if ( type_ == nullValue )
; 1209 :        return Value::Members();
; 1210 :    Members members;

	mov	DWORD PTR _members$[esp+92], ebx
	mov	DWORD PTR _members$[esp+96], ebx
	mov	DWORD PTR _members$[esp+100], ebx
	mov	DWORD PTR __$EHRec$[esp+96], ebx

; 1211 :    members.reserve( value_.map_->size() );

	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+8]
	push	eax
	lea	ecx, DWORD PTR _members$[esp+92]
	call	?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve

; 1212 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1213 :    ObjectValues::const_iterator it = value_.map_->begin();

	mov	ebp, DWORD PTR [esi]
	mov	eax, DWORD PTR [ebp+4]

; 1214 :    ObjectValues::const_iterator itEnd = value_.map_->end();

	mov	ecx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T56546[esp+92], ecx

; 1215 :    for ( ; it != itEnd; ++it )

$LN106@getMemberN:

; 1212 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1213 :    ObjectValues::const_iterator it = value_.map_->begin();

	mov	edi, eax

; 1215 :    for ( ; it != itEnd; ++it )

$LL108@getMemberN:
	mov	esi, ebp
	cmp	esi, ebx
	je	SHORT $LN141@getMemberN
	cmp	esi, ebp
	je	SHORT $LN142@getMemberN
$LN141@getMemberN:
	call	__invalid_parameter_noinfo
$LN142@getMemberN:
	cmp	edi, DWORD PTR $T56546[esp+92]
	je	$LN1@getMemberN

; 1216 :       members.push_back( std::string( (*it).first.c_str() ) );

	cmp	esi, ebx
	jne	SHORT $LN146@getMemberN
	call	__invalid_parameter_noinfo
$LN146@getMemberN:
	cmp	edi, DWORD PTR [esi+4]
	jne	SHORT $LN145@getMemberN
	call	__invalid_parameter_noinfo
$LN145@getMemberN:
	mov	ecx, DWORD PTR [edi+16]
	mov	eax, ecx
	mov	DWORD PTR $T56547[esp+112], 15		; 0000000fH
	mov	DWORD PTR $T56547[esp+108], ebx
	mov	BYTE PTR $T56547[esp+92], bl
	lea	esi, DWORD PTR [eax+1]
	npad	7
$LL233@getMemberN:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	cmp	dl, bl
	jne	SHORT $LL233@getMemberN
	sub	eax, esi
	push	eax
	push	ecx
	lea	ecx, DWORD PTR $T56547[esp+96]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	lea	edx, DWORD PTR $T56547[esp+88]
	push	edx
	lea	esi, DWORD PTR _members$[esp+92]
	mov	BYTE PTR __$EHRec$[esp+100], 1
	call	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
	mov	BYTE PTR __$EHRec$[esp+96], bl
	cmp	DWORD PTR $T56547[esp+112], 16		; 00000010H
	jb	SHORT $LN205@getMemberN
	mov	eax, DWORD PTR $T56547[esp+92]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN205@getMemberN:

; 1215 :    for ( ; it != itEnd; ++it )

	cmp	BYTE PTR [edi+41], bl
	je	SHORT $LN111@getMemberN
	call	__invalid_parameter_noinfo
	jmp	$LL108@getMemberN
$LN111@getMemberN:
	mov	eax, DWORD PTR [edi+8]
	cmp	BYTE PTR [eax+41], bl
	jne	SHORT $LN230@getMemberN
	mov	edi, eax
	mov	eax, DWORD PTR [edi]
	cmp	BYTE PTR [eax+41], bl
	jne	$LL108@getMemberN
$LL124@getMemberN:
	mov	edi, eax
	mov	eax, DWORD PTR [edi]
	cmp	BYTE PTR [eax+41], bl
	je	SHORT $LL124@getMemberN
	jmp	$LL108@getMemberN
$LN230@getMemberN:
	mov	eax, DWORD PTR [edi+4]
	cmp	BYTE PTR [eax+41], bl
	jne	$LN106@getMemberN
	npad	1
$LL107@getMemberN:
	cmp	edi, DWORD PTR [eax+8]
	jne	$LN106@getMemberN
	mov	edi, eax
	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+41], bl
	je	SHORT $LL107@getMemberN
	jmp	$LN106@getMemberN
$LN1@getMemberN:

; 1217 : #else
; 1218 :    ValueInternalMap::IteratorState it;
; 1219 :    ValueInternalMap::IteratorState itEnd;
; 1220 :    value_.map_->makeBeginIterator( it );
; 1221 :    value_.map_->makeEndIterator( itEnd );
; 1222 :    for ( ; !ValueInternalMap::equals( it, itEnd ); ValueInternalMap::increment(it) )
; 1223 :       members.push_back( std::string( ValueInternalMap::key( it ) ) );
; 1224 : #endif
; 1225 :    return members;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+84]
	push	esi
	lea	ecx, DWORD PTR _members$[esp+92]
	call	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	mov	eax, DWORD PTR _members$[esp+92]
	cmp	eax, ebx
	je	SHORT $LN226@getMemberN
	mov	ecx, DWORD PTR __Cat$57337[esp+84]
	mov	edi, DWORD PTR _members$[esp+96]
	push	ecx
	call	??$_Destroy_range@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	mov	edx, DWORD PTR _members$[esp+96]
	add	esp, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN226@getMemberN:
	mov	eax, esi
$LN5@getMemberN:

; 1226 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+88]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 68					; 00000044H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$1:
	lea	esi, DWORD PTR _members$[ebp]
	jmp	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$2:
	lea	ecx, DWORD PTR $T56547[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-72]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ENDP ; Json::Value::getMemberNames
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T59035 = -8						; size = 8
?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy, COMDAT
; _this$ = eax

; 1326 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	edi
	mov	edi, eax

; 1327 : 		erase(begin(), end());

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	push	edi
	push	ecx
	push	edi
	lea	eax, DWORD PTR $T59035[esp+32]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 1328 : 		this->_Alptr.destroy(&_Left(_Myhead));
; 1329 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1330 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1331 : 		this->_Alnod.deallocate(_Myhead, 1);

	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1332 : 		_Myhead = 0, _Mysize = 0;

	xor	eax, eax
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax

; 1333 : 		}

	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T59256 = -8						; size = 8
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = eax

; 525  : 		{	// destroy tree

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	edi
	mov	edi, eax

; 526  : 		_Tidy();

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	push	edi
	push	ecx
	push	edi
	lea	eax, DWORD PTR $T59256[esp+32]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax

; 527  : 		}

	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogtpy
; File c:\program files\microsoft visual studio 8\vc\include\map
_TEXT	ENDS
;	COMDAT ??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
; _this$ = esi

; 107  : 		{	// construct empty map from defaults

	call	?_Buynode@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode
	mov	DWORD PTR [esi+4], eax
	mov	BYTE PTR [eax+41], 1
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+8], eax
	mov	DWORD PTR [esi+8], 0

; 108  : 		}

	mov	eax, esi
	ret	0
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ
_TEXT	SEGMENT
$T59615 = -8						; size = 8
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
; _this$ = eax
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	push	edi
	push	ecx
	push	edi
	lea	eax, DWORD PTR $T59615[esp+32]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z
_TEXT	SEGMENT
$T59852 = -8						; size = 8
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor', COMDAT
; _this$ = eax
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	push	edi
	push	ecx
	push	edi
	lea	eax, DWORD PTR $T59852[esp+32]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	xor	eax, eax
	push	edi
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 8
	mov	eax, edi
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File f:\cygwin\home\charles\gusale\gusale\lib\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
_TEXT	ENDS
;	COMDAT ??1Value@Json@@QAE@XZ
_TEXT	SEGMENT
??1Value@Json@@QAE@XZ PROC				; Json::Value::~Value, COMDAT
; _this$ = ecx

; 473  : {

	push	esi
	mov	esi, ecx

; 474  :    switch ( type_ )

	movsx	eax, BYTE PTR [esi+8]
	cmp	eax, 4
	je	SHORT $LN5@Value
	add	eax, -6					; fffffffaH
	cmp	eax, 1
	ja	SHORT $LN4@Value

; 485  :       break;
; 486  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 487  :    case arrayValue:
; 488  :    case objectValue:
; 489  :       delete value_.map_;

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN4@Value
	call	??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z

; 490  :       break;

	jmp	SHORT $LN4@Value
$LN5@Value:

; 475  :    {
; 476  :    case nullValue:
; 477  :    case intValue:
; 478  :    case uintValue:
; 479  :    case realValue:
; 480  :    case booleanValue:
; 481  :       break;
; 482  :    case stringValue:
; 483  :       if ( allocated_ )

	test	DWORD PTR [esi+8], 256			; 00000100H
	je	SHORT $LN4@Value

; 484  :          valueAllocator()->releaseStringValue( value_.string_ );

	mov	eax, 1
	test	BYTE PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, al
	jne	SHORT $LN15@Value
	or	DWORD PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, eax
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	add	esp, 4
$LN15@Value:
	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+16]
	push	edx
	call	eax
$LN4@Value:

; 491  : #else
; 492  :    case arrayValue:
; 493  :       arrayAllocator()->destructArray( value_.array_ );
; 494  :       break;
; 495  :    case objectValue:
; 496  :       mapAllocator()->destructMap( value_.map_ );
; 497  :       break;
; 498  : #endif
; 499  :    default:
; 500  :       JSON_ASSERT_UNREACHABLE;
; 501  :    }
; 502  : 
; 503  :    if ( comments_ )

	mov	esi, DWORD PTR [esi+12]
	test	esi, esi
	je	SHORT $LN13@Value

; 504  :       delete[] comments_;

	mov	ecx, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
	lea	edi, DWORD PTR [esi-4]
	push	ecx
	push	4
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	pop	edi
$LN13@Value:
	pop	esi

; 505  : }

	ret	0
??1Value@Json@@QAE@XZ ENDP				; Json::Value::~Value
_TEXT	ENDS
PUBLIC	??0Value@Json@@QAE@W4ValueType@1@@Z		; Json::Value::Value
; Function compile flags: /Ogtpy
;	COMDAT ??0Value@Json@@QAE@W4ValueType@1@@Z
_TEXT	SEGMENT
??0Value@Json@@QAE@W4ValueType@1@@Z PROC		; Json::Value::Value, COMDAT

; 275  : {

	xor	eax, eax
	mov	BYTE PTR ?null@Value@Json@@2V12@B+8, al
	and	DWORD PTR ?null@Value@Json@@2V12@B+8, -257 ; fffffeffH
	mov	DWORD PTR ?null@Value@Json@@2V12@B+12, eax

; 276  :    switch ( type )
; 277  :    {
; 278  :    case nullValue:
; 279  :       break;
; 280  :    case intValue:
; 281  :    case uintValue:
; 282  :       value_.int_ = 0;
; 283  :       break;
; 284  :    case realValue:
; 285  :       value_.real_ = 0.0;
; 286  :       break;
; 287  :    case stringValue:
; 288  :       value_.string_ = 0;
; 289  :       break;
; 290  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 291  :    case arrayValue:
; 292  :    case objectValue:
; 293  :       value_.map_ = new ObjectValues();
; 294  :       break;
; 295  : #else
; 296  :    case arrayValue:
; 297  :       value_.array_ = arrayAllocator()->newArray();
; 298  :       break;
; 299  :    case objectValue:
; 300  :       value_.map_ = mapAllocator()->newMap();
; 301  :       break;
; 302  : #endif
; 303  :    case booleanValue:
; 304  :       value_.bool_ = false;
; 305  :       break;
; 306  :    default:
; 307  :       JSON_ASSERT_UNREACHABLE;
; 308  :    }
; 309  : }

	mov	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	ret	0
??0Value@Json@@QAE@W4ValueType@1@@Z ENDP		; Json::Value::Value
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ$0
__ehfuncinfo$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ PROC ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>, COMDAT
; _this$ = ecx
	push	-1
	push	__ehhandler$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+24], esi
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR __$EHRec$[esp+32], 0
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
	mov	DWORD PTR __$EHRec$[esp+32], -1
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN5@pair
	mov	eax, 1
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@pair
	test	BYTE PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, al
	jne	SHORT $LN8@pair
	or	DWORD PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, eax
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	add	esp, 4
$LN8@pair:
	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+8]
	push	edx
	call	eax
$LN5@pair:
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-8]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node::~_Node, COMDAT
; _this$ = ecx
	add	ecx, 16					; 00000010H
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
??1_Node@?$_Tree_nod@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_nod<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??__E?null@Value@Json@@2V12@B@@YAXXZ
text$yc	SEGMENT
??__E?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Json::Value::null'', COMDAT

; 22   : const Value Value::null;

	and	DWORD PTR ?null@Value@Json@@2V12@B+8, -257 ; fffffeffH
	push	OFFSET ??__F?null@Value@Json@@2V12@B@@YAXXZ ; `dynamic atexit destructor for 'Json::Value::null''
	call	_atexit
	pop	ecx
	ret	0
??__E?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Json::Value::null''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__EdummyValueAllocatorInitializer@Json@@YAXXZ
text$yc	SEGMENT
??__EdummyValueAllocatorInitializer@Json@@YAXXZ PROC	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer'', COMDAT

; 110  : } dummyValueAllocatorInitializer;

	mov	eax, 1
	test	BYTE PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, al
	jne	SHORT $LN5@dynamic
	or	DWORD PTR ?$S1@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4IA, eax
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	pop	ecx
$LN5@dynamic:
	ret	0
??__EdummyValueAllocatorInitializer@Json@@YAXXZ ENDP	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ
text$yd	SEGMENT
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ PROC ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator'', COMDAT
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7ValueAllocator@Json@@6B@
	ret	0
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ENDP ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__F?null@Value@Json@@2V12@B@@YAXXZ
text$yd	SEGMENT
??__F?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic atexit destructor for 'Json::Value::null'', COMDAT
	mov	ecx, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
??__F?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic atexit destructor for 'Json::Value::null''
text$yd	ENDS
PUBLIC	?null@Value@Json@@2V12@B			; Json::Value::null
?null@Value@Json@@2V12@B DB 010H DUP (?)		; Json::Value::null
_dummyValueAllocatorInitializer DB 01H DUP (?)
CRT$XCU	SEGMENT
?null$initializer$@Value@Json@@2P6AXXZA DD FLAT:??__E?null@Value@Json@@2V12@B@@YAXXZ ; Json::Value::null$initializer$
_dummyValueAllocatorInitializer$initializer$ DD FLAT:??__EdummyValueAllocatorInitializer@Json@@YAXXZ
CRT$XCU	ENDS
END
